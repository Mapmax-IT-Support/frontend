{"ast":null,"code":"import { applyMiddleware, compose, createStore, combineReducers } from 'redux';\nimport userReducer from '../Reducers/user-reducer';\nimport addressReducer from '../Reducers/address-reducer';\nimport placesReducer from '../Reducers/places-reducers';\nimport activeReducer from '../Reducers/active-reducer';\nimport thunk from 'redux-thunk';\nimport businessReducer from '../Reducers/business-reducer';\nimport zipReducer from '../Reducers/zip-reducer';\nimport stateReducer from '../Reducers/state-reducer';\nimport tractReducer from '../Reducers/tract-reducer';\nimport dataRangeReducer from '../Reducers/dataRange-reducer';\nimport readyReducer from '../Reducers/ready-reducer';\nimport isCityReducer from '../Reducers/isCity-reducer';\nimport tradeZoneBoundsReducer from '../Reducers/tradeZoneBounds-reducer';\nimport statsReducer from '../Reducers/stats-reducer';\nimport { ZIP } from '../Components/Map/Panels/DemographicsPanel';\nimport { CLEAR_DATA } from '../Actions/root-actions';\nimport transportationReducer from '../Reducers/transportation-reducer';\nimport geoUnitReducer from '../Reducers/geoUnit-reducer';\nconst allReducers = combineReducers({\n  user: userReducer,\n  address: addressReducer,\n  places: placesReducer,\n  business_type: businessReducer,\n  active_place: activeReducer,\n  zip: zipReducer,\n  state: stateReducer,\n  tract: tractReducer,\n  data_range: dataRangeReducer,\n  ready: readyReducer,\n  isCity: isCityReducer,\n  tradeZone_bounds: tradeZoneBoundsReducer,\n  stats: statsReducer,\n  transportation: transportationReducer,\n  geo_unit: geoUnitReducer\n});\nexport const rootReducer = (state, action) => {\n  if (action.type === CLEAR_DATA) {\n    state = undefined;\n  }\n\n  return allReducers(state, action);\n};\nconst allStoreEnhancers = compose(applyMiddleware(thunk) //    window.devToolsExtension && window.devToolsExtension()\n);\nconst localStorageUser = JSON.parse(localStorage.getItem('user'));\nconst user = localStorageUser === null ? {\n  _id: -1,\n  username: 'guest',\n  is_admin: false\n} : localStorageUser;\nconst store = createStore(rootReducer, {\n  user: user,\n  address: undefined,\n  places: [],\n  business_type: 'none',\n  active_place: undefined,\n  state: undefined,\n  zip: undefined,\n  tract: undefined,\n  data_range: ZIP,\n  ready: false,\n  isCity: false,\n  tradeZone_bounds: [],\n  geo_unit: 'zip',\n  stats: {\n    zip: undefined,\n    tradezone: undefined\n  },\n  transportation: undefined\n}, allStoreEnhancers);\nconsole.log(\"store init state: \", store.getState());\nexport default store;","map":{"version":3,"names":["applyMiddleware","compose","createStore","combineReducers","userReducer","addressReducer","placesReducer","activeReducer","thunk","businessReducer","zipReducer","stateReducer","tractReducer","dataRangeReducer","readyReducer","isCityReducer","tradeZoneBoundsReducer","statsReducer","ZIP","CLEAR_DATA","transportationReducer","geoUnitReducer","allReducers","user","address","places","business_type","active_place","zip","state","tract","data_range","ready","isCity","tradeZone_bounds","stats","transportation","geo_unit","rootReducer","action","type","undefined","allStoreEnhancers","localStorageUser","JSON","parse","localStorage","getItem","_id","username","is_admin","store","tradezone","console","log","getState"],"sources":["/Users/sumanthvarma/Desktop/frontend/src/Redux/store.js"],"sourcesContent":["import { applyMiddleware, compose, createStore, combineReducers} from 'redux';\nimport userReducer from '../Reducers/user-reducer'\nimport addressReducer from '../Reducers/address-reducer'\nimport placesReducer from '../Reducers/places-reducers'\nimport activeReducer from '../Reducers/active-reducer'\nimport thunk from 'redux-thunk';\nimport businessReducer from '../Reducers/business-reducer';\nimport zipReducer from '../Reducers/zip-reducer';\nimport stateReducer from '../Reducers/state-reducer'\nimport tractReducer from '../Reducers/tract-reducer'\nimport dataRangeReducer from '../Reducers/dataRange-reducer'\nimport readyReducer from '../Reducers/ready-reducer'\nimport isCityReducer from '../Reducers/isCity-reducer'\nimport tradeZoneBoundsReducer from '../Reducers/tradeZoneBounds-reducer'\nimport statsReducer from '../Reducers/stats-reducer'\nimport { ZIP } from  '../Components/Map/Panels/DemographicsPanel'\nimport { CLEAR_DATA } from '../Actions/root-actions'\nimport transportationReducer from '../Reducers/transportation-reducer'\nimport geoUnitReducer from '../Reducers/geoUnit-reducer'\n\nconst allReducers = combineReducers({\n    user: userReducer,\n    address: addressReducer,\n    places: placesReducer,\n    business_type: businessReducer,\n    active_place: activeReducer,\n    zip: zipReducer,\n    state: stateReducer,\n    tract: tractReducer,\n    data_range: dataRangeReducer,\n    ready: readyReducer,\n    isCity : isCityReducer,\n    tradeZone_bounds : tradeZoneBoundsReducer,\n    stats : statsReducer,\n    transportation: transportationReducer,\n    geo_unit : geoUnitReducer\n});\n\nexport const rootReducer = (state, action) => {\n    if (action.type === CLEAR_DATA) {\n      state = undefined\n    }\n    return allReducers(state, action)\n  }\n\nconst allStoreEnhancers = compose(\n    applyMiddleware(thunk),\n//    window.devToolsExtension && window.devToolsExtension()\n);\n\nconst localStorageUser = JSON.parse(localStorage.getItem('user'))\nconst user = (localStorageUser === null)\n     ? {_id: -1, username: 'guest', is_admin: false}\n     : localStorageUser\n\nconst store = createStore(\n    rootReducer, \n    {\n    user: user,\n    address: undefined,\n    places: [],\n    business_type: 'none',\n    active_place: undefined,\n    state: undefined,\n    zip: undefined,\n    tract: undefined,\n    data_range: ZIP,\n    ready: false,\n    isCity: false,\n    tradeZone_bounds: [],\n    geo_unit : 'zip',\n    stats : {\n        zip: undefined,\n        tradezone: undefined\n    },\n    transportation: undefined\n    },\n   \n    allStoreEnhancers\n    );\n\nconsole.log(\"store init state: \", store.getState())\n\nexport default store;"],"mappings":"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"},"metadata":{},"sourceType":"module"}