{"ast":null,"code":"import { showError } from '../Actions/user-actions';\nimport { API } from '../Constants';\nexport async function createLocation(pid, location) {\n  var formBody = {\n    'pid': pid,\n    'location': location\n  };\n  return fetch(API + 'locations/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formBody)\n  }).then(response => response.json()).catch(error => {\n    showError();\n    console.error('Create location error:', error);\n  });\n}\nexport async function getLocation(pid) {\n  return fetch(API + 'locations/' + pid, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.json()).catch(error => {\n    showError();\n    console.error('Location fetch Error:', error);\n  });\n}\nexport async function getComments(pid) {\n  return fetch(API + 'locations/comments/' + pid, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => response.json()).catch(error => {\n    showError();\n    console.error('Comments Fetch Error:', error);\n  });\n}\nexport async function createComment(pid, user, body) {\n  var formBody = {\n    'pid': pid,\n    'user': user,\n    'body': body\n  };\n  return fetch(API + 'locations/comments/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formBody)\n  }).then(response => response.json()).catch(error => {\n    showError();\n    console.error('Create Comment error:', error);\n  });\n} // /tradezone/cartography/create\n\nexport async function createTradeZoneCartography(pid, cartography, data_range) {\n  var formBody = {\n    'pid': pid,\n    'cartography': cartography,\n    'range': data_range\n  };\n  return fetch(API + 'locations/tradezone/cartography/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formBody)\n  }).then(response => response.json()).catch(error => {\n    showError();\n    console.error('Create Tradezone cartography error:', error);\n  });\n} // /tradezone/stats/create\n\nexport async function createTradeZoneStats(pid, stats, data_range) {\n  var formBody = {\n    'pid': pid,\n    'stats': stats,\n    'range': data_range\n  };\n  return fetch(API + 'locations/tradezone/stats/create', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formBody)\n  }).then(response => response.json()).catch(error => {\n    showError();\n    console.error('Create Tradezone stats error:', error);\n  });\n}","map":{"version":3,"names":["showError","API","createLocation","pid","location","formBody","fetch","method","headers","body","JSON","stringify","then","response","json","catch","error","console","getLocation","getComments","createComment","user","createTradeZoneCartography","cartography","data_range","createTradeZoneStats","stats"],"sources":["/Users/sumanthvarma/Desktop/frontend/src/Requests/locations-requests.js"],"sourcesContent":["import { showError } from '../Actions/user-actions'\nimport { API } from '../Constants'\n\n\nexport async function createLocation(pid, location) {\n\n    var formBody = {\n        'pid': pid,\n        'location': location\n    };\n    \n    return fetch(API + 'locations/create',\n    {\n        method : 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(formBody)\n    })\n        .then(response => response.json())\n        .catch(error => {\n            showError()\n            console.error('Create location error:', error)\n        })\n}\n\nexport async function getLocation(pid) {\n    \n    return fetch(API + 'locations/' + pid,\n    {\n        method : 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    })\n        .then(response => response.json())\n        .catch(error => {\n            showError()\n            console.error('Location fetch Error:', error)\n        })\n}\n\nexport async function getComments(pid) {\n    \n    return fetch(API + 'locations/comments/' + pid,\n    {\n        method : 'GET',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n    })\n        .then(response => response.json())\n        .catch(error => {\n            showError()\n            console.error('Comments Fetch Error:', error)\n        })\n}\n\nexport async function createComment(pid, user, body) {\n\n    var formBody = {\n        'pid': pid,\n        'user': user,\n        'body': body\n    };\n    \n    return fetch(API + 'locations/comments/create',\n    {\n        method : 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(formBody)\n    })\n        .then(response => response.json())\n        .catch(error => {\n            showError()\n            console.error('Create Comment error:', error)\n        })\n}\n\n// /tradezone/cartography/create\nexport async function createTradeZoneCartography(pid, cartography, data_range) {\n\n    var formBody = {\n        'pid': pid,\n        'cartography': cartography,\n        'range': data_range\n    };\n    \n    return fetch(API + 'locations/tradezone/cartography/create',\n    {\n        method : 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(formBody)\n    })\n        .then(response => response.json())\n        .catch(error => {\n            showError()\n            console.error('Create Tradezone cartography error:', error)\n        })\n}\n\n// /tradezone/stats/create\nexport async function createTradeZoneStats(pid, stats, data_range) {\n\n    var formBody = {\n        'pid': pid,\n        'stats': stats,\n        'range': data_range\n    };\n    \n    return fetch(API + 'locations/tradezone/stats/create',\n    {\n        method : 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body : JSON.stringify(formBody)\n    })\n        .then(response => response.json())\n        .catch(error => {\n            showError()\n            console.error('Create Tradezone stats error:', error)\n        })\n}"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,GAAT,QAAoB,cAApB;AAGA,OAAO,eAAeC,cAAf,CAA8BC,GAA9B,EAAmCC,QAAnC,EAA6C;EAEhD,IAAIC,QAAQ,GAAG;IACX,OAAOF,GADI;IAEX,YAAYC;EAFD,CAAf;EAKA,OAAOE,KAAK,CAACL,GAAG,GAAG,kBAAP,EACZ;IACIM,MAAM,EAAG,MADb;IAEIC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFb;IAKIC,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeN,QAAf;EALX,CADY,CAAL,CAQFO,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,EASFC,KATE,CASIC,KAAK,IAAI;IACZhB,SAAS;IACTiB,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;EACH,CAZE,CAAP;AAaH;AAED,OAAO,eAAeE,WAAf,CAA2Bf,GAA3B,EAAgC;EAEnC,OAAOG,KAAK,CAACL,GAAG,GAAG,YAAN,GAAqBE,GAAtB,EACZ;IACII,MAAM,EAAG,KADb;IAEIC,OAAO,EAAE;MACL,gBAAgB;IADX;EAFb,CADY,CAAL,CAOFI,IAPE,CAOGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPf,EAQFC,KARE,CAQIC,KAAK,IAAI;IACZhB,SAAS;IACTiB,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;EACH,CAXE,CAAP;AAYH;AAED,OAAO,eAAeG,WAAf,CAA2BhB,GAA3B,EAAgC;EAEnC,OAAOG,KAAK,CAACL,GAAG,GAAG,qBAAN,GAA8BE,GAA/B,EACZ;IACII,MAAM,EAAG,KADb;IAEIC,OAAO,EAAE;MACL,gBAAgB;IADX;EAFb,CADY,CAAL,CAOFI,IAPE,CAOGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPf,EAQFC,KARE,CAQIC,KAAK,IAAI;IACZhB,SAAS;IACTiB,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;EACH,CAXE,CAAP;AAYH;AAED,OAAO,eAAeI,aAAf,CAA6BjB,GAA7B,EAAkCkB,IAAlC,EAAwCZ,IAAxC,EAA8C;EAEjD,IAAIJ,QAAQ,GAAG;IACX,OAAOF,GADI;IAEX,QAAQkB,IAFG;IAGX,QAAQZ;EAHG,CAAf;EAMA,OAAOH,KAAK,CAACL,GAAG,GAAG,2BAAP,EACZ;IACIM,MAAM,EAAG,MADb;IAEIC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFb;IAKIC,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeN,QAAf;EALX,CADY,CAAL,CAQFO,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,EASFC,KATE,CASIC,KAAK,IAAI;IACZhB,SAAS;IACTiB,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;EACH,CAZE,CAAP;AAaH,C,CAED;;AACA,OAAO,eAAeM,0BAAf,CAA0CnB,GAA1C,EAA+CoB,WAA/C,EAA4DC,UAA5D,EAAwE;EAE3E,IAAInB,QAAQ,GAAG;IACX,OAAOF,GADI;IAEX,eAAeoB,WAFJ;IAGX,SAASC;EAHE,CAAf;EAMA,OAAOlB,KAAK,CAACL,GAAG,GAAG,wCAAP,EACZ;IACIM,MAAM,EAAG,MADb;IAEIC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFb;IAKIC,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeN,QAAf;EALX,CADY,CAAL,CAQFO,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,EASFC,KATE,CASIC,KAAK,IAAI;IACZhB,SAAS;IACTiB,OAAO,CAACD,KAAR,CAAc,qCAAd,EAAqDA,KAArD;EACH,CAZE,CAAP;AAaH,C,CAED;;AACA,OAAO,eAAeS,oBAAf,CAAoCtB,GAApC,EAAyCuB,KAAzC,EAAgDF,UAAhD,EAA4D;EAE/D,IAAInB,QAAQ,GAAG;IACX,OAAOF,GADI;IAEX,SAASuB,KAFE;IAGX,SAASF;EAHE,CAAf;EAMA,OAAOlB,KAAK,CAACL,GAAG,GAAG,kCAAP,EACZ;IACIM,MAAM,EAAG,MADb;IAEIC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFb;IAKIC,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeN,QAAf;EALX,CADY,CAAL,CAQFO,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,EASFC,KATE,CASIC,KAAK,IAAI;IACZhB,SAAS;IACTiB,OAAO,CAACD,KAAR,CAAc,+BAAd,EAA+CA,KAA/C;EACH,CAZE,CAAP;AAaH"},"metadata":{},"sourceType":"module"}