{"ast":null,"code":"var _jsxFileName = \"/Users/sumanthvarma/Desktop/frontend/src/Components/Navigation/NavLookUpForm.js\";\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { updateBusinessType } from '../../Actions/business-actions';\nimport { updateReady } from '../../Actions/ready-actions';\nimport { updateIsCity } from '../../Actions/isCity-actions';\nimport { updateDataRange } from '../../Actions/dataRange-actions';\nimport { updateGeoUnit } from '../../Actions/geoUnit-actions';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport AutoCompleteBar from '../AutoCompleteBar';\nimport * as selectors from '../../Reducers/selectors';\nimport { updateAddress } from '../../Actions/address-actions';\nimport { withRouter } from 'react-router-dom';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { getLocation } from '../../Requests/locations-requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ZIP = 'zip code tabulation area';\n\nclass LookUpForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadAddress = async address => {\n      await this.setState({\n        error: false\n      });\n      return new Promise(async (resolve, reject) => {\n        let zip,\n            number,\n            street,\n            city,\n            state = '';\n        let place;\n        let geoCode = await geocodeByAddress(address).then(results => {\n          for (let c of results[0].address_components) {\n            for (let type of c.types) {\n              if (type == 'street_number') number = c.long_name;\n              if (type == 'route') street = c.short_name;\n              if (type == 'locality') city = c.long_name;\n              if (type == 'administrative_area_level_1') state = c.short_name;\n              if (type == \"postal_code\") zip = c.long_name;\n            }\n          }\n\n          if (number == undefined) number = '';\n          if (street == undefined) street = '';\n          place = results[0];\n          return getLatLng(results[0]);\n        }).then(latLng => latLng).catch(error => console.error('Error', error));\n        let addressState = {};\n        addressState.formatted = address;\n        addressState.street = number + ' ' + street;\n        addressState.city = city;\n        addressState.state = state;\n        addressState.zip = zip;\n        addressState.coords = geoCode;\n        addressState.place = place; // handle no zip\n\n        if (addressState.zip == undefined) {\n          this.setState({\n            error: true,\n            errorMessage: \"Address is too general, please try another\"\n          });\n          return;\n        } // handle no street\n\n\n        if (addressState.street == \" \") {\n          let firstPart = address.substring(0, address.indexOf(','));\n          let alreadyInAddress = false;\n          Object.entries(addressState).forEach(_ref => {\n            let [label, value] = _ref;\n\n            if (value == firstPart) {\n              alreadyInAddress = true;\n            }\n          });\n          if (!alreadyInAddress) addressState.street = firstPart;\n        } // handle no city\n\n\n        if (addressState.city == undefined) {\n          let secondPart = address.substring(address.indexOf(',') + 1, address.length);\n          secondPart = secondPart.substring(0, secondPart.indexOf(','));\n          let alreadyInAddress2 = false;\n          Object.entries(addressState).forEach(_ref2 => {\n            let [label, value] = _ref2;\n\n            if (value == secondPart) {\n              alreadyInAddress2 = true;\n            }\n          });\n          if (!alreadyInAddress2) addressState.city = secondPart;\n        }\n\n        await this.setState({\n          address: addressState\n        });\n        resolve(addressState);\n      });\n    };\n\n    this.onUpdateAddress = async address => {\n      /* to-do watch for address to be undefined\n          // check for location from db \n          let results = await getLocation(address.place.place_id)\n      \n          if (results.res.length <= 0) {\n              let createRes = await createLocation(address.place.place_id, address)\n              address.isNewEntry = true\n          } else {\n              address.isNewEntry = false\n          }\n          */\n      address.isNewEntry = true;\n      this.props.onUpdateAddress(address);\n    };\n\n    this.checkLocalStorage = location => {\n      // if signed in push to recent searches\n      if (this.props.user_id != -1) {\n        let searches = JSON.parse(localStorage.getItem('recentSearches'));\n        if (searches == null) searches = new Map();else {\n          // keep last 25 \n          if (searches.length > 25) searches = searches.slice(searches.length - 25, searches.length);\n          searches = new Map(searches);\n        }\n\n        if (location.place) {\n          searches.set(location.place.place_id, {\n            location: location,\n            business_type: 'none',\n            date: new Date()\n          });\n          localStorage.setItem('recentSearches', JSON.stringify(Array.from(searches.entries())));\n        }\n      }\n    };\n\n    this.getAddress = async address => {\n      let addressState = await this.loadAddress(address);\n      this.setState({\n        address: addressState\n      });\n    };\n\n    this.setModalShow = flag => {\n      this.setState({\n        showModal: flag\n      });\n    };\n\n    this.onUpdateDataRange = range => {\n      this.props.onUpdateDataRange(range);\n    };\n\n    this.onUpdateGeoUnit = geo_unit => {\n      this.props.onUpdateGeoUnit(geo_unit);\n    };\n\n    this.onHandleAddressWarning = () => {\n      this.setState({\n        error: true,\n        errorMessage: \"Please begin typing your address and make sure to select it from the drop down menu\"\n      });\n    };\n\n    this.onFormChange = this.onFormChange.bind(this);\n    this.onBusinessFormChange = this.onBusinessFormChange.bind(this);\n    this.onUpdateBusinessType = this.onUpdateBusinessType.bind(this);\n    this.onUpdateReady = this.onUpdateReady.bind(this);\n    this.onHandleSubmit = this.onHandleSubmit.bind(this);\n    this.onUpdateIsCity = this.onUpdateIsCity.bind(this);\n    this.onTempFormChange = this.onTempFormChange.bind(this);\n    this.onPriceFormChange = this.onPriceFormChange.bind(this);\n    this.onUpdateAddress = this.onUpdateAddress.bind(this);\n    this.getAddress = this.getAddress.bind(this);\n    this.state = {\n      address: undefined,\n      priceLevel: 1,\n      business_type: 'none',\n      distance: 'Driving',\n      geoUnit: this.props.geo_unit,\n      showModal: false,\n      recentSearchs: new Map(),\n      errorMessage: \"\",\n      error: false\n    };\n  }\n\n  async componentDidMount() {\n    if (this.props.urlParams) {\n      let type = this.props.urlParams.business_type;\n      if (type == 'lodging') type = 'hotels /lodging';\n      let business = {\n        type: 'none',\n        //this.props.urlParams.business_type,\n        priceLevel: this.state.priceLevel\n      };\n      let promises = [this.loadAddress(JSON.parse(this.props.urlParams.address)), this.onUpdateBusinessType(business), this.setState({\n        business_type: this.props.urlParams.business_type.replace(/_/g, ' ')\n      })];\n      await Promise.all(promises);\n      await this.onUpdateAddress(this.state.address);\n      this.onUpdateReady(true);\n    }\n  }\n\n  onUpdateBusinessType(business_type) {\n    this.props.onUpdateBusinessType(business_type);\n  }\n\n  onUpdateIsCity(isCity) {\n    this.props.onUpdateIsCity(isCity);\n  }\n\n  onFormChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  onPriceFormChange(event) {\n    let value = event.target.value.substring(0, 1);\n    this.setState({\n      [event.target.name]: value\n    });\n  }\n\n  onBusinessFormChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  onTempFormChange(event) {\n    this.setState({\n      distance: event.target.value\n    });\n\n    if (event.target.value == 'Walking') {\n      this.onUpdateIsCity(true);\n    } else this.onUpdateIsCity(false);\n  }\n\n  onUpdateReady(isReady) {\n    this.props.onUpdateReady(isReady);\n  }\n\n  async onHandleSubmit() {\n    // return if no address\n    if (this.state.address == undefined) return;\n    await this.onUpdateAddress(this.state.address);\n    let type = this.state.business_type;\n    if (type == 'hotels /lodging') type = 'lodging';\n    let business = {\n      type: type.replace(/ /g, '_'),\n      priceLevel: this.state.priceLevel\n    };\n    this.onUpdateBusinessType(business);\n    this.onUpdateGeoUnit(this.state.geoUnit);\n\n    if (this.props.address.toString().length > 0) {\n      if (this.props.ready) {\n        await this.onUpdateReady(false);\n        await this.onUpdateReady(true);\n      } else {\n        await this.onUpdateReady(true);\n      } // reset data_range to zip\n\n\n      if (this.props.data_range != ZIP) {\n        await this.props.onUpdateDataRange(ZIP);\n      } // recent searches\n\n\n      this.checkLocalStorage(this.props.address);\n      let address = encodeURI(JSON.stringify(this.props.address.formatted));\n      let business_type = encodeURI(this.props.business_type.type);\n      let url = '/' + address + '/' + business_type;\n      this.props.history.push(url);\n    } else {\n      this.onUpdateReady(false);\n    }\n  }\n\n  render() {\n    console.log(this.state.address === undefined);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navBar_search\",\n      children: [/*#__PURE__*/_jsxDEV(AutoCompleteBar, {\n        urlParams: this.props.urlParams,\n        addressFunction: this.getAddress,\n        position: \"absolute\",\n        fontSize: \"12px\",\n        marginTop: \"35px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: [this.state.address != undefined && /*#__PURE__*/_jsxDEV(Button, {\n          disabled: this.state.error,\n          variant: \"primary\",\n          onClick: this.onHandleSubmit,\n          className: \"go_button\",\n          children: \"Go\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 53\n        }, this), this.state.address == undefined && /*#__PURE__*/_jsxDEV(Button, {\n          disabled: true,\n          variant: \"primary\",\n          onClick: this.onHandleAddressWarning,\n          className: \"go_button\",\n          style: {\n            opacity: 0.75\n          },\n          children: \"Go\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createSelector(selectors.userSelector, selectors.businessTypeSelector, selectors.readySelector, selectors.addressSelector, selectors.isCitySelector, selectors.tradeZoneBoundsSelector, selectors.dataRangeSelector, selectors.geoUnitSelector, (user, business_type, ready, address, isCity, tradeZone_bounds, data_range, geo_unit) => ({\n  user,\n  business_type,\n  ready,\n  address,\n  isCity,\n  tradeZone_bounds,\n  data_range,\n  geo_unit\n}));\nconst mapActionsToProps = {\n  onUpdateBusinessType: updateBusinessType,\n  onUpdateReady: updateReady,\n  onUpdateIsCity: updateIsCity,\n  onUpdateAddress: updateAddress,\n  onUpdateDataRange: updateDataRange,\n  onUpdateGeoUnit: updateGeoUnit\n};\nexport default withRouter(connect(mapStateToProps, mapActionsToProps)(LookUpForm));","map":{"version":3,"names":["React","Form","Button","updateBusinessType","updateReady","updateIsCity","updateDataRange","updateGeoUnit","connect","createSelector","AutoCompleteBar","selectors","updateAddress","withRouter","geocodeByAddress","getLatLng","getLocation","ZIP","LookUpForm","Component","constructor","props","loadAddress","address","setState","error","Promise","resolve","reject","zip","number","street","city","state","place","geoCode","then","results","c","address_components","type","types","long_name","short_name","undefined","latLng","catch","console","addressState","formatted","coords","errorMessage","firstPart","substring","indexOf","alreadyInAddress","Object","entries","forEach","label","value","secondPart","length","alreadyInAddress2","onUpdateAddress","isNewEntry","checkLocalStorage","location","user_id","searches","JSON","parse","localStorage","getItem","Map","slice","set","place_id","business_type","date","Date","setItem","stringify","Array","from","getAddress","setModalShow","flag","showModal","onUpdateDataRange","range","onUpdateGeoUnit","geo_unit","onHandleAddressWarning","onFormChange","bind","onBusinessFormChange","onUpdateBusinessType","onUpdateReady","onHandleSubmit","onUpdateIsCity","onTempFormChange","onPriceFormChange","priceLevel","distance","geoUnit","recentSearchs","componentDidMount","urlParams","business","promises","replace","all","isCity","event","target","name","isReady","toString","ready","data_range","encodeURI","url","history","push","render","log","opacity","mapStateToProps","userSelector","businessTypeSelector","readySelector","addressSelector","isCitySelector","tradeZoneBoundsSelector","dataRangeSelector","geoUnitSelector","user","tradeZone_bounds","mapActionsToProps"],"sources":["/Users/sumanthvarma/Desktop/frontend/src/Components/Navigation/NavLookUpForm.js"],"sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport { updateBusinessType} from '../../Actions/business-actions'\nimport { updateReady } from '../../Actions/ready-actions'\nimport { updateIsCity } from '../../Actions/isCity-actions'\nimport { updateDataRange } from '../../Actions/dataRange-actions'\nimport { updateGeoUnit } from '../../Actions/geoUnit-actions'\nimport { connect } from 'react-redux'\nimport { createSelector } from 'reselect';\nimport AutoCompleteBar from '../AutoCompleteBar'\nimport * as selectors from '../../Reducers/selectors'\nimport { updateAddress} from '../../Actions/address-actions'\nimport {  withRouter } from 'react-router-dom'\nimport  {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport { getLocation } from '../../Requests/locations-requests';\n\nconst ZIP = 'zip code tabulation area'\n\nclass LookUpForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.onFormChange = this.onFormChange.bind(this);\n        this.onBusinessFormChange = this.onBusinessFormChange.bind(this);\n        this.onUpdateBusinessType = this.onUpdateBusinessType.bind(this);\n        this.onUpdateReady = this.onUpdateReady.bind(this)\n        this.onHandleSubmit = this.onHandleSubmit.bind(this)\n        this.onUpdateIsCity = this.onUpdateIsCity.bind(this)\n        this.onTempFormChange = this.onTempFormChange.bind(this)\n        this.onPriceFormChange = this.onPriceFormChange.bind(this)\n        this.onUpdateAddress = this.onUpdateAddress.bind(this)\n        this.getAddress = this.getAddress.bind(this)\n\n        this.state = {\n            address: undefined,\n            priceLevel : 1,\n            business_type : 'none',\n            distance: 'Driving',\n            geoUnit: this.props.geo_unit,\n            showModal: false,\n            recentSearchs : new Map(),\n            errorMessage : \"\",\n            error : false,\n        };\n    }\n\n    async componentDidMount() {\n        if (this.props.urlParams) {\n            let type = this.props.urlParams.business_type\n            if (type == 'lodging') type = 'hotels /lodging'\n\n            let business = {\n                type: 'none',//this.props.urlParams.business_type,\n                priceLevel : this.state.priceLevel\n            }\n            let promises= [\n                this.loadAddress(JSON.parse(this.props.urlParams.address)),\n                this.onUpdateBusinessType(business),\n                this.setState({business_type: this.props.urlParams.business_type.replace(/_/g, ' ')}),\n            ]\n            await Promise.all(promises)\n            await this.onUpdateAddress(this.state.address)\n            this.onUpdateReady(true)\n        }\n    }\n\n    loadAddress = async (address) => {\n        await this.setState({ error : false })\n\n        return new Promise(async (resolve, reject) => {\n\n            let zip, number, street, city, state = ''\n            let place;\n            let geoCode = await geocodeByAddress(address)\n            .then(results => { \n                for (let c of results[0].address_components) {\n                    for (let type of c.types) {\n                        if (type == 'street_number')\n                            number = c.long_name \n                        if (type == 'route')\n                            street =  c.short_name \n                        if (type == 'locality')\n                            city = c.long_name\n                        if (type == 'administrative_area_level_1')\n                            state = c.short_name\n                        if (type == \"postal_code\") \n                            zip = c.long_name\n                    }\n                }\n                if (number == undefined) number = ''\n                if (street == undefined) street = ''\n                place = results[0]\n                return getLatLng(results[0])\n            })\n            .then(latLng => latLng)\n            .catch(error => console.error('Error', error));\n            let addressState = {}\n            addressState.formatted = address\n            addressState.street = number + ' ' + street\n           \n            addressState.city = city\n            addressState.state = state\n            addressState.zip = zip\n            addressState.coords = geoCode\n            addressState.place = place\n\n            // handle no zip\n            if (addressState.zip == undefined) {\n                this.setState({ error : true, errorMessage : \"Address is too general, please try another\"})\n                return \n            }\n            \n            // handle no street\n            if (addressState.street == \" \") {\n                let firstPart = address.substring(0, address.indexOf(','))\n                let alreadyInAddress = false\n\n                Object.entries(addressState).forEach(([label, value]) => {\n                    if (value == firstPart) {\n                        alreadyInAddress = true\n                    }\n                })\n                if (!alreadyInAddress)\n                    addressState.street = firstPart\n            }\n\n            // handle no city\n            if (addressState.city == undefined) {\n                let secondPart = address.substring(address.indexOf(',')+1, address.length)\n                secondPart = secondPart.substring(0, secondPart.indexOf(','))\n                let alreadyInAddress2 = false\n\n                Object.entries(addressState).forEach(([label, value]) => {\n                    if (value == secondPart) {\n                        alreadyInAddress2 = true\n                    }\n                })\n                if (!alreadyInAddress2)\n                    addressState.city = secondPart\n            }\n            await this.setState({address: addressState })\n            resolve(addressState)\n        })\n    }\n    \n    onUpdateBusinessType(business_type) {\n        this.props.onUpdateBusinessType(business_type)\n    }\n\n    onUpdateIsCity(isCity) {\n        this.props.onUpdateIsCity(isCity)\n    }\n    onFormChange(event) {\n        this.setState({[event.target.name]: event.target.value})\n    }\n\n    onPriceFormChange(event) {\n       let value = event.target.value.substring(0, 1)\n       this.setState({[event.target.name]: value})\n    }\n\n    onBusinessFormChange(event) {\n        this.setState({[event.target.name]: event.target.value})\n    }\n\n    onTempFormChange(event) {\n        this.setState({distance: event.target.value})\n        if (event.target.value == 'Walking') {\n            this.onUpdateIsCity(true)\n        }\n        else\n            this.onUpdateIsCity(false)\n    }\n\n    onUpdateReady(isReady) {\n        this.props.onUpdateReady(isReady)\n    }\n\n    async onHandleSubmit() {\n        // return if no address\n        if (this.state.address == undefined) \n            return;\n        \n        await this.onUpdateAddress(this.state.address)\n        let type = this.state.business_type\n        if (type == 'hotels /lodging') type = 'lodging'\n        let business = {\n            type: type.replace(/ /g, '_'),\n            priceLevel : this.state.priceLevel\n        }\n        this.onUpdateBusinessType(business)\n        this.onUpdateGeoUnit(this.state.geoUnit)\n       \n        if (this.props.address.toString().length > 0) {\n            if (this.props.ready) {\n                await this.onUpdateReady(false)\n                await this.onUpdateReady(true)\n            } else {\n                await this.onUpdateReady(true)\n            }\n\n            // reset data_range to zip\n            if (this.props.data_range != ZIP) {\n                await this.props.onUpdateDataRange(ZIP)\n            }\n            // recent searches\n            this.checkLocalStorage(this.props.address)\n\n            let address = encodeURI(JSON.stringify(this.props.address.formatted))\n            let business_type = encodeURI(this.props.business_type.type)\n            let url = '/' + address + '/' + business_type\n            this.props.history.push(url)\n        }\n        else {\n            this.onUpdateReady(false)\n        }\n    }\n\n    onUpdateAddress = async (address) => {\n    /* to-do watch for address to be undefined\n        // check for location from db \n        let results = await getLocation(address.place.place_id)\n    \n        if (results.res.length <= 0) {\n            let createRes = await createLocation(address.place.place_id, address)\n            address.isNewEntry = true\n        } else {\n            address.isNewEntry = false\n        }\n        */\n       address.isNewEntry = true\n       this.props.onUpdateAddress(address)\n    }\n\n    checkLocalStorage = location => {\n        // if signed in push to recent searches\n        if (this.props.user_id != -1) {\n               let searches = JSON.parse(localStorage.getItem('recentSearches'))\n                \n               if (searches == null) searches = new Map()\n               else {\n                    // keep last 25 \n                    if (searches.length > 25)\n                    searches = searches.slice((searches.length) -25, searches.length)\n                    searches = new Map(searches)\n               }\n\n               if (location.place) {\n                searches.set(location.place.place_id, { \n                    location: location,\n                     business_type: 'none', \n                     date : new Date()\n                 })\n \n                localStorage.setItem('recentSearches', JSON.stringify(Array.from(searches.entries())))\n               }  \n           }\n    }\n\n    getAddress = async (address) => {\n        let addressState = await this.loadAddress(address)\n        this.setState({address: addressState})\n    }\n\n    setModalShow = (flag) => {\n        this.setState({showModal: flag})\n    }\n\n    onUpdateDataRange = (range) => {\n        this.props.onUpdateDataRange(range)\n    }\n\n    onUpdateGeoUnit = (geo_unit) => {\n        this.props.onUpdateGeoUnit(geo_unit)\n    }\n\n    onHandleAddressWarning = () => {\n        this.setState({ error : true, errorMessage : \"Please begin typing your address and make sure to select it from the drop down menu\"})\n    }\n\n    render() {\n console.log(this.state.address === undefined)\n        return (\n            <div className=\"navBar_search\">\n                <AutoCompleteBar urlParams={this.props.urlParams} addressFunction={this.getAddress} position=\"absolute\" fontSize=\"12px\" marginTop=\"35px\"/>\n            <Form>\n                {this.state.address != undefined && <Button  disabled={this.state.error} variant=\"primary\" onClick={this.onHandleSubmit} \n                    className=\"go_button\">\n                    Go</Button>\n                }\n                {this.state.address == undefined && <Button  disabled={true} variant=\"primary\" onClick={this.onHandleAddressWarning} \n                    className=\"go_button\" style={{opacity: 0.75}}>\n                    Go</Button>\n                }\n            </Form>\n        </div>\n        );\n    }\n}\n\n\n\nconst mapStateToProps = createSelector(\n    selectors.userSelector,\n    selectors.businessTypeSelector,\n    selectors.readySelector,\n    selectors.addressSelector,\n    selectors.isCitySelector,\n    selectors.tradeZoneBoundsSelector,\n    selectors.dataRangeSelector,\n    selectors.geoUnitSelector,\n    (user, business_type, ready, address, isCity, tradeZone_bounds, data_range, geo_unit) => ({\n        user,\n        business_type,\n        ready,\n        address,\n        isCity,\n        tradeZone_bounds,\n        data_range,\n        geo_unit\n    })\n);\n\nconst mapActionsToProps = {\n     onUpdateBusinessType: updateBusinessType,\n     onUpdateReady: updateReady,\n     onUpdateIsCity: updateIsCity,\n     onUpdateAddress: updateAddress,\n     onUpdateDataRange: updateDataRange,\n     onUpdateGeoUnit : updateGeoUnit\n};\n\nexport default withRouter(connect(mapStateToProps, mapActionsToProps) (LookUpForm));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}