{"ast":null,"code":"// get lat/lng of 5 points in a circle around specified center where radius = distance\n// https://www.movable-type.co.uk/scripts/latlong.html\nexport function getPoints(center, distance, precision) {\n  let φ1 = toRadians(center.lat);\n  let λ1 = toRadians(center.lng);\n  let d = distance;\n  let R = 6371; // radius of earth in KM\n\n  let points = [];\n  let divisor = precision;\n\n  for (let i = 0; i < divisor; i++) {\n    let brng = toRadians(i * (360 / divisor));\n    let φ2 = Math.asin(Math.sin(φ1) * Math.cos(d / R) + Math.cos(φ1) * Math.sin(d / R) * Math.cos(brng));\n    let λ2 = λ1 + Math.atan2(Math.sin(brng) * Math.sin(d / R) * Math.cos(φ1), Math.cos(d / R) - Math.sin(φ1) * Math.sin(φ2));\n    let coords = {};\n    coords.lat = toDegrees(φ2);\n    coords.lng = toDegrees(λ2);\n    points.push(coords);\n  }\n\n  return points;\n}\n\nconst toRadians = num => num * (Math.PI / 180);\n\nconst toDegrees = num => num * (180 / Math.PI);","map":{"version":3,"names":["getPoints","center","distance","precision","φ1","toRadians","lat","λ1","lng","d","R","points","divisor","i","brng","φ2","Math","asin","sin","cos","λ2","atan2","coords","toDegrees","push","num","PI"],"sources":["/Users/sumanthvarma/Desktop/frontend/src/Helpers/TradeZone.js"],"sourcesContent":["\n// get lat/lng of 5 points in a circle around specified center where radius = distance\n// https://www.movable-type.co.uk/scripts/latlong.html\nexport function getPoints(center, distance, precision) {\n    let φ1 = toRadians(center.lat)\n    let λ1 = toRadians(center.lng) \n    let d = distance\n    let R = 6371 // radius of earth in KM\n    let points = []\n    let divisor = precision\n    for (let i = 0; i < divisor; i++) {\n        let brng =  toRadians((i * (360/divisor)))\n        let φ2 = Math.asin(Math.sin(φ1)*Math.cos(d/R) +\n            Math.cos(φ1)*Math.sin(d/R)*Math.cos(brng));\n        let λ2 = λ1 + Math.atan2(Math.sin(brng)*Math.sin(d/R)*Math.cos(φ1),\n            Math.cos(d/R)-Math.sin(φ1)*Math.sin(φ2));\n        let coords = {}\n        coords.lat = toDegrees(φ2)\n        coords.lng = toDegrees(λ2)\n        points.push(coords)\n    }\n    return points\n}\n\nconst toRadians = (num) =>  num * (Math.PI/180)\nconst toDegrees = (num) =>  num * (180/Math.PI)"],"mappings":"AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,SAArC,EAAgD;EACnD,IAAIC,EAAE,GAAGC,SAAS,CAACJ,MAAM,CAACK,GAAR,CAAlB;EACA,IAAIC,EAAE,GAAGF,SAAS,CAACJ,MAAM,CAACO,GAAR,CAAlB;EACA,IAAIC,CAAC,GAAGP,QAAR;EACA,IAAIQ,CAAC,GAAG,IAAR,CAJmD,CAItC;;EACb,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,OAAO,GAAGT,SAAd;;EACA,KAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6BC,CAAC,EAA9B,EAAkC;IAC9B,IAAIC,IAAI,GAAIT,SAAS,CAAEQ,CAAC,IAAI,MAAID,OAAR,CAAH,CAArB;IACA,IAAIG,EAAE,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASd,EAAT,IAAaY,IAAI,CAACG,GAAL,CAASV,CAAC,GAACC,CAAX,CAAb,GACfM,IAAI,CAACG,GAAL,CAASf,EAAT,IAAaY,IAAI,CAACE,GAAL,CAAST,CAAC,GAACC,CAAX,CAAb,GAA2BM,IAAI,CAACG,GAAL,CAASL,IAAT,CADtB,CAAT;IAEA,IAAIM,EAAE,GAAGb,EAAE,GAAGS,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACE,GAAL,CAASJ,IAAT,IAAeE,IAAI,CAACE,GAAL,CAAST,CAAC,GAACC,CAAX,CAAf,GAA6BM,IAAI,CAACG,GAAL,CAASf,EAAT,CAAxC,EACVY,IAAI,CAACG,GAAL,CAASV,CAAC,GAACC,CAAX,IAAcM,IAAI,CAACE,GAAL,CAASd,EAAT,IAAaY,IAAI,CAACE,GAAL,CAASH,EAAT,CADjB,CAAd;IAEA,IAAIO,MAAM,GAAG,EAAb;IACAA,MAAM,CAAChB,GAAP,GAAaiB,SAAS,CAACR,EAAD,CAAtB;IACAO,MAAM,CAACd,GAAP,GAAae,SAAS,CAACH,EAAD,CAAtB;IACAT,MAAM,CAACa,IAAP,CAAYF,MAAZ;EACH;;EACD,OAAOX,MAAP;AACH;;AAED,MAAMN,SAAS,GAAIoB,GAAD,IAAUA,GAAG,IAAIT,IAAI,CAACU,EAAL,GAAQ,GAAZ,CAA/B;;AACA,MAAMH,SAAS,GAAIE,GAAD,IAAUA,GAAG,IAAI,MAAIT,IAAI,CAACU,EAAb,CAA/B"},"metadata":{},"sourceType":"module"}