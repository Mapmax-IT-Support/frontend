{"ast":null,"code":"var _jsxFileName = \"/Users/sumanthvarma/Desktop/frontend/src/Components/Map/index.js\";\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { getNearby, getPages, getPhoto } from '../../Requests/map-requests';\nimport '../../css/App.scss';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { updatePlaces } from '../../Actions/places-actions';\nimport { updateActivePlace } from '../../Actions/active-actions';\nimport ReactDOMServer from 'react-dom/server';\nimport DemographicsPanel from './Panels/DemographicsPanel';\nimport { updateTract } from '../../Actions/tract-actions';\nimport Form from 'react-bootstrap/Form';\nimport { getPoints } from '../../Helpers/TradeZone';\nimport { ZIP, TRADE_ZONE } from './Panels/DemographicsPanel';\nimport { GOOGLE_KEY, google, BUSINESS_TYPES, POI_TYPES } from '../../Constants.js';\nimport { renderCircle, renderMarker, renderComplexMarker, renderLargeMarker, renderInfoContent, BLUE_MARKER, YELLOW_MARKER, GREEN_MARKER, RED_MARKER, BLUE_DOT_05, YELLOW_DOT_25, YELLOW_DOT_3, BLUE_DOT_5 } from './GoogleMaps/GoogleMapComponents';\nimport { activeSelector, addressSelector, businessTypeSelector, dataRangeSelector, placesSelector, stateSelector, tractSelector, zipSelector, isCitySelector, tradeZoneBoundsSelector, transportationSelector, geoUnitSelector, statsSelector } from '../../Reducers/selectors';\nimport SliderSwitch from '../UI/SliderSwitch';\nimport Button from 'react-bootstrap/Button';\nimport { updateTradeZoneBounds } from '../../Actions/tradeZoneBoundaries-actions';\nimport ReactStreetview from 'react-streetview';\nimport { updateTransportation } from '../../Actions/transportation-actions';\nimport { createTradeZoneCartography } from '../../Requests/locations-requests';\nimport FadeLoader from '../UI/FadeLoader';\nimport { getSubwayTotals } from '../../Requests/subway-requests';\nimport { getListingByPlaceId } from \"../../Requests/listings-requests\";\nimport { withRouter } from 'react-router-dom';\nimport MediaQuery from 'react-responsive';\nimport Toolbar from '../Mobile/Toolbar';\nimport PlacesList from './Panels/PlacesList';\nimport ChartsPanel from './Panels/ChartsPanel'; // import CommentsPanel from './Panels/CommentsPanel'\n\nimport TransportationPanel from './Panels/TransportationPanel';\nimport { getCounty } from '../utils/distance';\nimport { Boroughs } from '../utils/zipcodes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst infoWindow = new google.maps.InfoWindow();\n\nclass SimpleMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadListing = async () => {\n      let res = await getListingByPlaceId(this.props.address.place.place_id);\n      if (res === undefined) return;\n\n      if (res.length > 0) {\n        this.setState({\n          hasListing: true,\n          listing: res[0]\n        });\n      }\n    };\n\n    this.updatePlacesFromRedux = async (type, display_value, index) => {\n      if (type == 'hotels_/lodging') type = 'lodging';else if (type == 'all') type = 'establishment';\n\n      if (type == 'none') {\n        this.setState({\n          places_count: 0,\n          poi: display_value,\n          business_type: type,\n          business_type_option: 'none'\n        }, () => this.onUpdatePlaces([]));\n      } else {\n        this.setState({\n          places_count: index + 1,\n          poi: display_value,\n          business_type: type,\n          business_type_option: 'none'\n        });\n        this.clearMarkers();\n        await this.loadPlaceType(type, index);\n      }\n    };\n\n    this.clearMarkers = () => {\n      // clear markers \n      let updatedMarkers = new Map();\n      this.state.markers.forEach((e, i) => {\n        e.marker.setMap(null);\n        if (i < this.props.places.length) updatedMarkers.set(e.place_id, e);\n      });\n      this.setState({\n        markers: updatedMarkers\n      });\n    };\n\n    this.onHandleCenter = () => {\n      this.setState({\n        center: this.props.center\n      });\n      if (this.state.siteView) this.setState({\n        siteView: false\n      });\n    };\n\n    this.updateMarkers = (map, markers_to_keep) => {\n      let markerMap = this.state.markers;\n      Array.from(this.props.places).map((place, i) => {\n        var id = place.place_id;\n        var img = '';\n        var marker; // filter preexisting places\n\n        if (!markers_to_keep.has(id)) {\n          if (this.props.business_type.type != 'residential' && this.props.business_type.type == this.state.business_type) {\n            img = RED_MARKER;\n          } else {\n            img = YELLOW_MARKER;\n          }\n\n          marker = renderMarker(i, place.geometry.location, map, place.name, img);\n          markerMap.set(id, {\n            marker: marker,\n            place: place\n          });\n        }\n      });\n      this.setState({\n        markers: markerMap\n      });\n      this.updateInfoWindow(map);\n    };\n\n    this.updateInfoWindow = map => Array.from(this.state.markers, _ref => {\n      let [key, value] = _ref;\n      // to close window on exit\n      value.marker.addListener('click', () => {\n        this.onUpdateActivePlace(value.place);\n        this.updatePlaceDetails(() => {\n          infoWindow.setContent(ReactDOMServer.renderToStaticMarkup(this.getInfoContent(value.place)));\n          infoWindow.marker = value;\n          infoWindow.open(map, value.marker);\n        });\n      });\n    });\n\n    this.getPlaceDetails = (map, place_id, callback) => {\n      var service = new google.maps.places.PlacesService(map);\n      var request = {\n        placeId: place_id,\n        fields: ['id', 'name', 'icon', 'formatted_address', 'website']\n      }; // get details\n\n      service.getDetails(request, (place, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          callback(place);\n        } else {\n          console.error('error', status);\n        }\n      });\n    };\n\n    this.getOpen = opening_hours => {\n      if (opening_hours === undefined) return 'Unknown';else {\n        let answer = opening_hours.is_open ? \"Yes\" : \"No\";\n        return answer;\n      }\n    };\n\n    this.updateMarker = marker => {\n      if (marker == undefined) return;\n      var img = '';\n\n      if (marker.place.place_id == this.props.address.place.place_id) {\n        img = BLUE_MARKER;\n      } else if (marker.place_id === this.props.active_place.place_id) {\n        img = GREEN_MARKER;\n      } else if (this.props.business_type.type != 'residential' && this.props.business_type.type == this.state.business_type) {\n        img = RED_MARKER;\n      } else {\n        img = YELLOW_MARKER;\n      }\n\n      marker.marker.setIcon(img);\n    };\n\n    this.handleSwitch = checked => {\n      if (checked) {\n        this.renderCartography();\n      } else {\n        this.clearCartography();\n      }\n    };\n\n    this.onHandleSite = checked => {\n      if (checked) {\n        this.setState({\n          siteView: true\n        });\n      } else {\n        this.setState({\n          siteView: false\n        });\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        center: event.center\n      });\n    };\n\n    this.onUpdateTransportation = async transportation => {\n      this.props.onUpdateTransportation(transportation);\n    };\n\n    this.loadNearbySubways = async () => {\n      let type = 'subway_station';\n      getNearby(this.props.address, type, async (data, token) => {\n        // cache loaded places\n        for (let place of data) {\n          if (!this.state.places_cache.get(type).has(place.place_id)) {\n            this.state.places_cache.get(type).set(place.place_id, place);\n          }\n        }\n\n        this.state.tokens_cache.set(type, token);\n        let subwayCoords = [];\n        Array.from(this.state.places_cache.get(type).entries()).map((_ref2, i) => {\n          let [key, value] = _ref2;\n          if (i > 4) return;\n          subwayCoords.push(value.geometry.location);\n        });\n        let subway_data = await getSubwayTotals(subwayCoords); // Calculate distance //////\n\n        subway_data.forEach(e => {\n          let dist = distance(this.props.address.coords.lat, this.props.address.coords.lng, e.data.G_LAT, e.data.G_LNG);\n          e.distance = dist;\n        });\n        subway_data.sort((x, y) => {\n          if (x.distance < y.distance) {\n            return -1;\n          }\n\n          if (x.distance > y.distance) {\n            return 1;\n          }\n\n          return 0;\n        });\n        let transportObj = JSON.parse(JSON.stringify(this.props.transportation));\n\n        if (transportObj == '') {\n          transportObj = {};\n        } // clean up subway data\n\n\n        let subwayMap = new Map();\n\n        for (let i = 0; i < subway_data.length; i++) {\n          if (!subwayMap.has(subway_data[i].name)) {\n            subwayMap.set(subway_data[i].name, subway_data[i].data);\n          } else {\n            // check if values are equal, if so arggregate to one location\n            if (subwayMap.get(subway_data[i].name).G_TOTAL_ENT == subway_data[i].data.G_TOTAL_ENT) {\n              subwayMap.set(subway_data[i].name, { ...subwayMap.get(subway_data[i].name),\n                G_LINES: subwayMap.get(subway_data[i].name).G_LINES + '-' + subway_data[i].data.G_LINES\n              });\n            }\n          }\n        }\n\n        transportObj.subways = subwayMap;\n        await this.onUpdateTransportation(transportObj);\n      });\n    };\n\n    this.generateHeading = () => {\n      var sv = new google.maps.StreetViewService(); // initialize a new panorama API object and point to the element with ID streetview as container\n\n      var panorama = new google.maps.StreetViewPanorama(document.getElementById('pano'), {\n        position: this.props.center\n      });\n      sv.getPanorama({\n        location: this.props.center,\n        radius: 50\n      }, (data, status) => {\n        if (status === google.maps.StreetViewStatus.OK) {\n          var marker_pano = new google.maps.Marker({\n            position: this.props.center,\n            map: panorama\n          });\n          var heading = google.maps.geometry.spherical.computeHeading(data.location.latLng, marker_pano.getPosition());\n          panorama.setPov({\n            heading: heading,\n            pitch: 0\n          });\n          this.setState({\n            heading: heading\n          });\n        }\n      });\n    };\n\n    this.navigateToListing = () => {\n      let url = '/listing/' + this.state.listing.listingId;\n      this.props.history.push(url);\n    };\n\n    this.openToolBar = () => {\n      this.setState({\n        toolsOpen: !this.state.toolsOpen\n      });\n    };\n\n    this.myRef = /*#__PURE__*/React.createRef();\n    this.streetView = /*#__PURE__*/React.createRef();\n    this.service = new google.maps.StreetViewService(); // let defaultPlace = this.props.business_type.type\n    // let type = this.props.business_type.type\n    // let business_option = type.replace(/_/g, ' ')\n    // if (type == 'lodging') type = 'hotels /lodging'\n    // else if (defaultPlace == 'residential') {\n    //   defaultPlace = 'establishment'\n    //   business_option = 'all'\n    // }\n\n    this.state = {\n      center: this.props.center,\n      map: undefined,\n      markers: new Map(),\n      place_details: new Map(),\n      place_photos: new Map(),\n      places_cache: new Map(),\n      tokens_cache: new Map(),\n      places_count: 20,\n      address_line: this.props.address.street + ', ' + this.props.address.city + ' ' + this.props.address.state + ', ' + this.props.address.zip,\n      boundaries: getPoints(this.props.center, 0.804, 1),\n      cartography: {},\n      display_cartography: true,\n      business_type: '',\n      //defaultPlace,\n      cartographyLoaded: false,\n      poi: 'none',\n      business_type_option: '',\n      //business_option,\n      aerial: true,\n      zoom: this.props.zoom,\n      siteView: false,\n      mapType: google.maps.MapTypeId.SATELLITE,\n      loadingCart: {\n        [ZIP]: true,\n        [TRADE_ZONE]: true\n      },\n      mapOptions: {\n        streetViewControl: true,\n        scaleControl: true,\n        fullscreenControl: false,\n        styles: [{\n          featureType: \"poi.business\",\n          elementType: \"labels\",\n          stylers: [{\n            visibility: \"off\"\n          }]\n        }],\n        gestureHandling: \"greedy\",\n        disableDoubleClickZoom: true,\n        minZoom: 5,\n        maxZoom: 100,\n        mapTypeControl: true,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        mapTypeControlOptions: {\n          style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n          position: google.maps.ControlPosition.BOTTOM_CENTER,\n          mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE, google.maps.MapTypeId.HYBRID]\n        },\n        zoomControl: true,\n        clickableIcons: false\n      },\n      toolsOpen: false\n    };\n    this.onUpdatePlaces = this.onUpdatePlaces.bind(this);\n    this.onUpdateActivePlace = this.onUpdateActivePlace.bind(this);\n    this.onUpdateTract = this.onUpdateTract.bind(this);\n    this.lessPlaces = this.lessPlaces.bind(this);\n    this.loadAllPlaces = this.loadAllPlaces.bind(this);\n    this.loadMorePlaces = this.loadMorePlaces.bind(this);\n    this.loadDefaultPlaces = this.loadDefaultPlaces.bind(this);\n    this.exampleRef = /*#__PURE__*/React.createRef();\n    this.updateMarkers = this.updateMarkers.bind(this);\n    this.updateMarker = this.updateMarker.bind(this);\n    this.updateInfoWindow = this.updateInfoWindow.bind(this);\n    this.getopen = this.getOpen.bind(this);\n    this.getPlaceDetails = this.getPlaceDetails.bind(this);\n    this.updatePlaceDetails = this.updatePlaceDetails.bind(this);\n    this.onBusinessFormChange = this.onBusinessFormChange.bind(this);\n    this.loadZipCartography = this.loadZipCartography.bind(this);\n    this.renderCartography = this.renderCartography.bind(this);\n    this.getInfoContent = this.getInfoContent.bind(this);\n    this.handleSwitch = this.handleSwitch.bind(this);\n    this.clearCartography = this.clearCartography.bind(this);\n    this.onPlacesCountChange = this.onPlacesCountChange.bind(this);\n    this.updateRadii = this.updateRadii.bind(this);\n    this.initCache = this.initCache.bind(this);\n    this.onUpdateTradeZoneBounds = this.onUpdateTradeZoneBounds.bind(this);\n    this.loadTradeZoneCartography = this.loadTradeZoneCartography.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.onPoiFormChange = this.onPoiFormChange.bind(this); // to-do create function updateInfoWindow\n\n    setInterval(async () => {\n      let isBound = infoWindow.getMap() ? true : false;\n\n      if (!isBound && infoWindow.marker != undefined && infoWindow.marker.key != 'your_business') {\n        let img = '';\n\n        if (infoWindow.marker.place.place_id == this.props.address.place.place_id) {\n          img = BLUE_MARKER;\n        } else if (this.props.business_type.type != 'residential' && infoWindow.marker.place.types.includes(this.props.business_type.type)) {\n          img = RED_MARKER;\n        } else {\n          img = YELLOW_MARKER;\n        }\n\n        infoWindow.marker.marker.setIcon(img);\n        this.onUpdateActivePlace(false);\n      }\n    }, 500);\n  }\n\n  async componentDidMount() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    this.initCache();\n    await this.loadListing(); // first time user check\n\n    if (this.props.isFirstTimeUser) {\n      this.props.updateIsFirstTime(false);\n\n      if (window.innerWidth > 550) {\n        this.props.runJoyRideTutorial();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.onUpdatePlaces([]);\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    // active place change\n    if (this.props.active_place && this.props.active_place !== prevProps.active_place) if (this.props.active_place.toString().length > 0) {\n      this.setState({\n        center: this.props.active_place.geometry.location\n      }); // highlight marker on map\n\n      if (prevProps.active_place.toString().length > 0) {\n        this.updateMarker(this.state.markers.get(prevProps.active_place.place_id));\n      }\n\n      this.state.markers.get(this.props.active_place.place_id).marker.setIcon(GREEN_MARKER);\n      google.maps.event.trigger(this.state.markers.get(this.props.active_place.place_id).marker, 'click');\n    } // update markers \n\n    if (this.props.places !== prevProps.places && !(!this.state.siteView && prevState.siteView)) {\n      if (this.state.map != undefined) {\n        let all_markers = Array.from(this.state.markers.values());\n        let markers_to_delete = [];\n        let markers_to_keep = new Map();\n\n        if (prevProps.places.length > this.props.places.length) {\n          markers_to_delete = all_markers.slice(this.props.places.length, prevProps.places.length);\n          all_markers.slice(0, this.props.length).forEach(m => markers_to_keep.set(m.place_id, 0)); // set placeholder, actual value not needed\n        } else if (prevProps.places.length < this.props.places.length) {\n          let arr = all_markers.slice(0, prevProps.places.length);\n          arr.forEach(m => markers_to_keep.set(m.place_id, 0));\n        } else {\n          this.clearMarkers();\n        } // remove necesary markers\n\n\n        markers_to_delete.forEach(m => m.marker.setMap(null)); // update all markers ....\n\n        this.updateMarkers(this.state.map, markers_to_keep);\n      }\n    } // update geojson\n\n\n    if (this.state.map !== undefined) {\n      if (this.props.data_range !== prevProps.data_range) {\n        if (this.state.display_cartography) await this.renderCartography();\n      }\n    } // reload subways on address change\n\n\n    if (prevProps.address != this.props.address) {\n      this.clearMarkers();\n      this.loadListing(); //    this.clearCartography()\n    } // show subways on transportation change\n\n\n    if (prevProps.transportation.showSubways != this.props.transportation.showSubways) {\n      await this.loadNearbySubways();\n      this.updatePlacesFromRedux('subway_station', 'subway station', 4);\n    } // change business type from demo panel\n\n\n    if (prevProps.business_type != this.props.business_type) {\n      let defaultPlace = this.props.business_type.type;\n      let type = this.props.business_type.type;\n      let business_option = type.replace(/_/g, ' ');\n      if (type == 'lodging') type = 'hotels /lodging';else if (defaultPlace == 'residential') {\n        defaultPlace = 'establishment';\n        business_option = 'all';\n      } //  await this.setState({ business_type : type, business_type_option : business_option })\n\n      this.clearMarkers();\n      this.updateMarkers(this.state.map, new Map());\n    } // zip cart\n\n\n    if (prevProps.stats.zip !== this.props.stats.zip) {\n      this.loadZipCartography();\n    } //TZ cart\n\n\n    if (prevProps.stats.tradezone !== this.props.stats.tradezone) {\n      this.loadTradeZoneCartography();\n    }\n  }\n\n  onUpdateTradeZoneBounds(tradeZone_bounds) {\n    this.props.onUpdateTradeZoneBounds(tradeZone_bounds);\n  }\n\n  async loadZipCartography() {\n    if (this.props.address.zip == undefined) return;\n    let mCartography = Object.assign({}, this.state.cartography);\n    let data = [this.props.stats.zip];\n    mCartography.zip = data;\n    this.setState({\n      cartography: mCartography,\n      loadingCart: { ...this.state.loadingCart,\n        [ZIP]: false\n      }\n    }); // init geojson rendering\n\n    this.renderCartography();\n  }\n\n  async loadTradeZoneCartography() {\n    // get new tz cart with bounds \n    let data = this.props.stats.tradezone.collection;\n    let mCartography = Object.assign({}, this.state.cartography);\n    mCartography.tradezone = data;\n    await this.setState({\n      cartography: mCartography,\n      cartographyLoaded: true,\n      loadingCart: { ...this.state.loadingCart,\n        [TRADE_ZONE]: false\n      }\n    });\n    this.renderCartography();\n  }\n\n  initCache() {\n    for (let type of BUSINESS_TYPES.concat(POI_TYPES).concat(['establishment'])) {\n      if (type == 'hotels /lodging') type = 'lodging';\n      this.state.places_cache.set(type, new Map());\n    }\n  }\n\n  clearCartography() {\n    if (this.state.map) this.state.map.data.forEach(feature => {\n      this.state.map.data.remove(feature);\n    });\n  }\n\n  renderCartography() {\n    // clear data layer \n    this.clearCartography(); // render cartography\n\n    if (this.props.data_range == ZIP) {\n      if (this.state.cartography.zip !== undefined && this.state.map) {\n        this.state.cartography.zip.forEach(featureSet => this.state.map.data.addGeoJson(featureSet));\n      } else {\n        setTimeout(() => this.renderCartography(), 100);\n      }\n    } else if (this.props.data_range == TRADE_ZONE) {\n      if (this.state.cartography.tradezone !== undefined && this.state.map) {\n        this.state.cartography.tradezone.forEach(featureSet => this.state.map.data.addGeoJson(featureSet));\n      } else {\n        setTimeout(() => this.renderCartography(), 100);\n      }\n    }\n  }\n\n  async loadDefaultPlaces() {\n    // TO-DO: get placeId with address or from autofill\n    if (this.props.address.place.types.includes('establishment')) {\n      // get and set place for address if applicable \n      let place = this.props.address.place;\n      await this.setState({\n        addressPlace: place\n      });\n      this.getPlaceDetails(this.state.map, this.props.address.place.place_id, async details => {\n        place.icon = details.icon;\n        place.name = details.name;\n        place.place_id = details.id;\n        this.state.place_details.set(place.id, details);\n      });\n    } // await getNearby(this.props.address, this.state.business_type, (data, token) => {\n    //   var morePlaces = this.props.places.concat(data)\n    //   this.setState({places: morePlaces})\n    //   for (let place of morePlaces) {\n    //     if (!this.state.places_cache.get(this.state.business_type).has(place.place_id)) {\n    //       this.state.places_cache.get(this.state.business_type).set(place.place_id, place)\n    //     } \n    //   }\n    //   this.state.tokens_cache.set(this.state.business_type, token)\n    //   if (this.props.address.place.types.includes('establishment')) {  // get and set place for address if applicable \n    //     this.getPlaceDetails(this.state.map, this.props.address.place.place_id, async (details) => {\n    //       let place = this.props.address.place\n    //       place.icon = details.icon\n    //       place.name = details.name\n    //       place.place_id = details.id\n    //       this.state.place_details.set(place.id, details)\n    //       await this.setState({ addressPlace : place})\n    //       this.onUpdatePlaces(data)\n    //     })\n    //   } else {\n    //     this.onUpdatePlaces(data)\n    //   }\n    //   this.setState({ places_count : 20 })\n    // })     \n\n  }\n\n  loadPlaceType(type, index) {\n    let cached_places = Array.from(this.state.places_cache.get(type).values());\n\n    if (cached_places.length == 0) {\n      // if not cached load places\n      getNearby(this.props.address, type, (data, token) => {\n        //     var morePlaces = this.props.places.concat(data)\n        this.setState({\n          places: data\n        }); // cache loaded places\n\n        for (let place of data) {\n          if (!this.state.places_cache.get(type).has(place.place_id)) {\n            this.state.places_cache.get(this.state.business_type).set(place.place_id, place);\n          }\n        }\n\n        this.state.tokens_cache.set(type, token);\n        this.onUpdatePlaces(data);\n      }); // if already cached \n    } else {\n      if (index == undefined) {\n        this.setState({\n          places: cached_places.slice(0, 20)\n        });\n        this.onUpdatePlaces(cached_places.slice(0, 20));\n      } else {\n        this.setState({\n          places: cached_places.slice(0, index)\n        });\n        this.onUpdatePlaces(cached_places.slice(0, index));\n      }\n    }\n  }\n\n  loadAllPlaces() {\n    getNearby(this.props.address, 'establishment', (data, token) => {\n      var morePlaces = this.props.places.concat(data);\n      this.setState({\n        places: morePlaces\n      });\n      this.setState({\n        places_count: 20\n      });\n      this.state.tokens_cache.set('establishment', token);\n      this.onUpdatePlaces(data);\n    });\n  }\n\n  loadMorePlaces(index, hasCallback, callback) {\n    let cached_places = Array.from(this.state.places_cache.get(this.state.business_type).values());\n\n    if (cached_places.length > index) {\n      var morePlaces = this.state.places.concat(cached_places.slice(index, index + 20));\n      this.setState({\n        places: morePlaces\n      }, () => {\n        this.onUpdatePlaces(morePlaces);\n\n        if (hasCallback) {\n          callback();\n        }\n      });\n    } else {\n      getPages(this.state.tokens_cache.get(this.state.business_type), (data, token) => {\n        this.state.tokens_cache.set(this.state.business_type, token);\n        var morePlaces = this.props.places.concat(data);\n\n        for (let place of morePlaces) {\n          if (!this.state.places_cache.get(this.state.business_type).has(place.place_id)) {\n            this.state.places_cache.get(this.state.business_type).set(place.place_id, place);\n          }\n        }\n\n        this.setState({\n          places: morePlaces\n        }, () => {\n          this.onUpdatePlaces(morePlaces);\n\n          if (hasCallback) {\n            callback();\n          }\n        });\n      });\n    }\n  }\n\n  lessPlaces() {\n    if (this.props.places.length > 20) {\n      var places = this.props.places;\n      places = places.slice(0, places.length - 20);\n      this.setState({\n        places: places\n      });\n      this.onUpdatePlaces(places);\n    }\n  }\n\n  async onBusinessFormChange(event) {\n    let type = event.target.value.replace(/ /g, '_');\n    if (type == 'hotels_/lodging') type = 'lodging';else if (type == 'all') type = 'establishment'; // clear places\n\n    if (type == 'none') {\n      this.setState({\n        places_count: 0,\n        business_type_option: event.target.value,\n        business_type: type,\n        poi: 'none'\n      }, () => this.onUpdatePlaces([]));\n    } else {\n      this.setState({\n        places_count: 20,\n        business_type_option: event.target.value,\n        business_type: type,\n        poi: 'none'\n      });\n      this.clearMarkers();\n      await this.loadPlaceType(type, 0);\n    }\n  }\n\n  async onPoiFormChange(event) {\n    let type = event.target.value.replace(/ /g, '_');\n    if (type == 'hotels_/lodging') type = 'lodging';else if (type == 'all') type = 'establishment';\n\n    if (type == 'none') {\n      this.setState({\n        places_count: 0,\n        poi: event.target.value,\n        business_type: type,\n        business_type_option: 'none'\n      }, () => this.onUpdatePlaces([]));\n    } else {\n      this.setState({\n        places_count: 20,\n        poi: event.target.value,\n        business_type: type,\n        business_type_option: 'none'\n      });\n      this.clearMarkers();\n      await this.loadPlaceType(type);\n    }\n  }\n\n  // to do clean up & cache ffs\n  onPlacesCountChange(event) {\n    this.setState({\n      places_count: event.target.value\n    });\n\n    switch (event.target.value) {\n      case '20':\n        var places = this.props.places;\n        places = places.slice(0, 20);\n        this.setState({\n          places: places\n        });\n        this.onUpdatePlaces(places);\n        break;\n\n      case '40':\n        if (this.props.places.length < 40) {\n          this.loadMorePlaces(20, false);\n        } else {\n          var places = this.props.places;\n          places = places.slice(0, 40);\n          this.setState({\n            places: places\n          });\n          this.onUpdatePlaces(places);\n        }\n\n        break;\n\n      case '60':\n        if (this.props.places.length < 40) {\n          this.loadMorePlaces(20, true, () => {\n            this.loadMorePlaces(40, false);\n          });\n        } else if (this.state.places.length == 40) {\n          this.loadMorePlaces(40, false);\n        } else {\n          var places = this.props.places;\n          places = places.slice(0, 60);\n          this.onUpdatePlaces(places);\n        }\n\n        break;\n    }\n  }\n\n  onUpdatePlaces(data) {\n    if (this.props.address.place.types.includes('establishment')) {\n      // check not to add two markers id address contains place\n      let updatedData = [this.state.addressPlace];\n      data.map(e => {\n        if (e.place_id === undefined) return;\n        if (e.place_id !== this.state.addressPlace.place_id) updatedData.push(e);\n      });\n      this.props.onUpdatePlaces(updatedData);\n    } else this.props.onUpdatePlaces(data);\n  }\n\n  onUpdateActivePlace(data) {\n    this.props.onUpdateActivePlace(data);\n  }\n\n  onUpdateTract(data) {\n    this.props.onUpdateTract(data);\n  }\n\n  getInfoContent(place) {\n    return renderInfoContent.apply(this, [place]);\n  }\n\n  async updateRadii() {\n    const {\n      Manhattan,\n      Brooklyn,\n      Queens,\n      Bronx,\n      Staten\n    } = Boroughs;\n    const county = await getCounty(this.props.address.zip);\n\n    if (!county) {\n      // NJ, Long Island    \n      let circle1Distance = 4828; // 3 mi\n\n      let circle2Distance = 8046; // 0.5 mi\n\n      const circle1 = renderCircle(circle1Distance, \"#ffff00\", this.state.map, this.state.center);\n      const circle2 = renderCircle(circle2Distance, \"#0000ff\", this.state.map, this.state.center); // to-do cleanup, add label\n\n      let points = getPoints(this.state.center, 4.828, 1);\n      renderComplexMarker('circle1', points[0], this.state.map, '3 mi', YELLOW_DOT_3, new google.maps.Point(60, 60));\n      points = getPoints(this.state.center, 8.046, 1);\n      renderComplexMarker('circle2', points[0], this.state.map, '5 mi', BLUE_DOT_5, new google.maps.Point(60, 60)); // render test points\n\n      points = getPoints(this.state.center, 4.8225, 1);\n      let counter = 1;\n      let divisor = 10;\n      let increment = 4.828 / divisor; //4.828 = exact 3 miles 0.804672\n\n      for (let i = 1; i <= divisor; i++) {\n        points = points.concat(getPoints(this.state.center, i * increment, counter * 8));\n        counter += 1;\n      } // render TZ pins \n\n\n      points.forEach((e, i) => {//          renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, GREEN_MARKER)\n      });\n      let outerRing = getPoints(this.state.center, 8, 80);\n      outerRing.forEach((e, i) => {//        renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, RED_MARKER)\n      });\n      return;\n    }\n\n    if (county === Manhattan) {\n      // WALKING\n      let circle1Distance = 402; // 0.25 mi\n\n      let circle2Distance = 804; // 0.5 mi\n\n      const circle1 = renderCircle(circle1Distance, \"#ffff00\", this.state.map, this.state.center);\n      const circle2 = renderCircle(circle2Distance, \"#0000ff\", this.state.map, this.state.center); // to-do cleanup, add label\n\n      let points = getPoints(this.state.center, 0.402, 1);\n      renderComplexMarker('circle1', points[0], this.state.map, '0.25 mi', YELLOW_DOT_25, new google.maps.Point(60, 60));\n      points = getPoints(this.state.center, 0.804, 1);\n      renderComplexMarker('circle2', points[0], this.state.map, '0.5 mi', BLUE_DOT_05, new google.maps.Point(60, 60)); // render test points\n\n      let divisor = 4;\n      let increment = 0.35 / divisor; // 0.2174799\n\n      let counter = 1;\n\n      for (let i = 1; i <= divisor; i++) {\n        points = points.concat(getPoints(this.state.center, i * increment, counter * 8));\n        counter += 1;\n      }\n\n      points.forEach((e, i) => {//          renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, GREEN_MARKER)\n      });\n      let outerRing = getPoints(this.state.center, .800, 50);\n      outerRing.forEach((e, i) => {//          renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, RED_MARKER)\n      });\n    } else {\n      // Brooklyn, Staten Island, Bronx    \n      let circle1Distance = 804; // 0.5 mi\n\n      let circle2Distance = 4828; // 3 mi\n\n      const circle1 = renderCircle(circle1Distance, \"#0000ff\", this.state.map, this.state.center);\n      const circle2 = renderCircle(circle2Distance, \"#ffff00\", this.state.map, this.state.center); // to-do cleanup, add label\n\n      let points = getPoints(this.state.center, 0.804, 1);\n      renderComplexMarker('circle1', points[0], this.state.map, '0.5 mi', BLUE_DOT_05, new google.maps.Point(60, 60));\n      points = getPoints(this.state.center, 4.828, 1);\n      renderComplexMarker('circle1', points[0], this.state.map, '3 mi', YELLOW_DOT_3, new google.maps.Point(60, 60)); // render test points\n\n      points = getPoints(this.state.center, 4.8225, 1);\n      let counter = 1;\n      let divisor = 5;\n      let increment = 0.8 / divisor; //4.828 = exact 3 miles 0.804672\n      //  0.804672km = 0.5miles\n\n      for (let i = 1; i <= divisor; i++) {\n        points = points.concat(getPoints(this.state.center, i * increment, counter * 8));\n        counter += 1;\n      }\n\n      points.forEach((e, i) => {//       renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, GREEN_MARKER)\n      });\n      let outerRing = getPoints(this.state.center, 4.828, 80);\n      outerRing.forEach((e, i) => {//  renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, RED_MARKER)\n      });\n    }\n  }\n\n  updateMapCenter(coords) {\n    this.setState({\n      center: coords\n    });\n  } // markers\n\n\n  updatePlaceDetails(callback) {\n    // get details\n    if (!this.state.place_details.has(this.props.active_place.place_id)) {\n      this.getPlaceDetails(this.state.map, this.props.active_place.place_id, details => {\n        this.state.place_details.set(this.props.active_place.place_id, details); // get photo\n\n        if (!this.state.place_photos.has(this.props.active_place.place_id)) {\n          if (this.props.active_place.photos !== undefined) {\n            getPhoto(this.props.active_place.photos[0].photo_reference, 400, 400, data => {\n              this.state.place_photos.set(this.props.active_place.place_id, data.url);\n              callback();\n            });\n          } else {\n            callback();\n          }\n        }\n      });\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const apiIsLoaded = (map, maps, center) => {\n      this.state.map = map; //    if (!this.props.address.place.types.includes('establishment')) {\n\n      let yourBusinessMarker = renderMarker('your_business', center, map, 'Your Business', BLUE_MARKER);\n      yourBusinessMarker.setZIndex(9999);\n      const content = '<h3>Your Location</h3>'; //     var content ='<h3>Your ' + this.props.business_type.type.toString() +'</h3>'\n\n      yourBusinessMarker.addListener('click', () => {\n        infoWindow.setContent(content);\n        infoWindow.open(map, yourBusinessMarker);\n        infoWindow.marker = yourBusinessMarker;\n      }); //     }\n\n      this.updateRadii();\n      this.generateHeading();\n      this.loadDefaultPlaces(); // this.loadNearbySubways()\n    }; // const resultsDropDown = <div>\n    //   <span style={{ color: 'whitesmoke'}}> Results</span>\n    //   <Form.Control value={this.state.places_count} as=\"select\" name=\"places_count\" onChange={this.onPlacesCountChange}>\n    //                 <option>20</option>\n    //                 <option>40</option>\n    //                 <option>60</option>\n    //   </Form.Control>\n    // </div>\n\n\n    const MapButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-control_bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowOne\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"toolbar_button\",\n          onClick: this.props.runJoyRideTutorial,\n          children: \"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"toolbar_button\",\n          variant: \"light\",\n          onClick: this.onHandleCenter,\n          children: \"Ctr\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switch_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Street\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SliderSwitch, {\n            checked: this.state.siteView,\n            switchFunction: this.onHandleSite\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"switch_container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Overlay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 987,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(SliderSwitch, {\n            checked: true,\n            switchFunction: this.handleSwitch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 988,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 986,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"place_dropdown_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" Other Businesses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 993,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: this.state.business_type_option,\n            as: \"select\",\n            name: \"business_type\",\n            onChange: this.onBusinessFormChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 995,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"all\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 996,\n              columnNumber: 27\n            }, this), BUSINESS_TYPES.map((e, i) => {\n              if (e != 'residential') {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: e.replace(/_/g, ' ')\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 999,\n                  columnNumber: 38\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 994,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Places of Interest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1005,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: this.state.poi,\n            as: \"select\",\n            name: \"poi\",\n            onChange: this.onPoiFormChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1007,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"all\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1008,\n              columnNumber: 25\n            }, this), POI_TYPES.map((e, i) => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                children: e.replace(/_/g, ' ')\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1010,\n                columnNumber: 34\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1006,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1004,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 977,\n      columnNumber: 5\n    }, this); // init street view only after heading is calculated\n\n\n    let streetViewContainer = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n    const streetView = /*#__PURE__*/_jsxDEV(ReactStreetview, {\n      ref: this.streetView,\n      apiKey: GOOGLE_KEY,\n      streetViewPanoramaOptions: {\n        position: {\n          lat: this.props.center.lat,\n          lng: this.props.center.lng\n        },\n        pov: {\n          heading: this.state.heading,\n          pitch: 0\n        },\n        zoom: 1,\n        source: google.maps.StreetViewSource.OUTDOOR\n      },\n      width: '400px',\n      height: '400px'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 25\n    }, this);\n\n    if (this.state.heading != undefined) {\n      streetViewContainer = streetView;\n    }\n\n    const MapBundle = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"googleMap_container\",\n      children: [/*#__PURE__*/_jsxDEV(GoogleMapReact, {\n        ref: this.myRef,\n        bootstrapURLKeys: {\n          key: GOOGLE_KEY\n        },\n        center: this.state.center,\n        zoom: this.state.zoom,\n        yesIWantToUseGoogleMapApiInternals: true,\n        layerTypes: ['TrafficLayer', 'TransitLayer'],\n        id: 'map',\n        onGoogleApiLoaded: _ref3 => {\n          let {\n            map,\n            maps\n          } = _ref3;\n          return apiIsLoaded(map, maps, this.state.center);\n        },\n        options: this.state.mapOptions,\n        resetBoundsOnResize: true,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1038,\n        columnNumber: 9\n      }, this), this.state.siteView && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"streetView_container\",\n        children: streetViewContainer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 9\n      }, this), this.state.loadingCart[this.props.data_range] == true && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fade_container\",\n        children: [/*#__PURE__*/_jsxDEV(FadeLoader, {\n          color: \"#123abc\",\n          size: 10\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1057,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Loading Overlay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 21\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map_container\",\n      children: [/*#__PURE__*/_jsxDEV(MediaQuery, {\n        minDeviceWidth: 551,\n        children: /*#__PURE__*/_jsxDEV(MapButtons, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1066,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MediaQuery, {\n        maxDeviceWidth: 550,\n        children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n          openToolBar: this.openToolBar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1068,\n          columnNumber: 11\n        }, this), this.state.toolsOpen && /*#__PURE__*/_jsxDEV(MapButtons, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 36\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 9\n      }, this), this.state.hasListing && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"listingBanner\",\n        onClick: this.navigateToListing,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'black'\n            },\n            children: \"This location has a listing, click \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1075,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"blue\"\n            },\n            children: \"here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1075,\n            columnNumber: 92\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'black'\n            },\n            children: \" for details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1075,\n            columnNumber: 136\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1074,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MediaQuery, {\n        maxDeviceWidth: 550,\n        children: [this.state.hasListing && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: window.innerHeight - 86 - 32\n          },\n          children: MapBundle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 40\n        }, this), !this.state.hasListing && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: window.innerHeight - 86\n          },\n          children: MapBundle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1085,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(MediaQuery, {\n        minDeviceWidth: 551,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: this.state.hasListing ? `calc(${this.props.height} - 32px)` : this.props.height\n          },\n          children: MapBundle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1092,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1091,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(MediaQuery, {\n        maxDeviceWidth: 550,\n        children: [/*#__PURE__*/_jsxDEV(DemographicsPanel, {\n          business_type: this.props.business_type,\n          street: this.props.address.street,\n          city: this.props.address.city,\n          state: this.props.address.state,\n          zip: this.props.address.zip,\n          lat: this.props.address.coords.lat,\n          lng: this.props.address.coords.lng,\n          getHelpers: this.getHelpers,\n          orientation: \"demographics-list-vertical \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1099,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PlacesList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1111,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(ChartsPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"extrasContainer\",\n          children: /*#__PURE__*/_jsxDEV(TransportationPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSimpleMap.defaultProps = {\n  defaultCenter: {\n    lat: 59.95,\n    lng: 30.33\n  },\n  defaultzoom: 11\n};\nconst mapStateToProps = createSelector(placesSelector, activeSelector, addressSelector, businessTypeSelector, zipSelector, stateSelector, tractSelector, dataRangeSelector, isCitySelector, tradeZoneBoundsSelector, transportationSelector, geoUnitSelector, statsSelector, (places, active_place, address, business_type, zip, state, tract, data_range, isCity, tradeZone_bounds, transportation, geo_unit, stats) => ({\n  places,\n  active_place,\n  address,\n  business_type,\n  zip,\n  state,\n  tract,\n  data_range,\n  isCity,\n  tradeZone_bounds,\n  transportation,\n  geo_unit,\n  stats\n}));\nconst mapActionsToProps = {\n  onUpdatePlaces: updatePlaces,\n  onUpdateActivePlace: updateActivePlace,\n  onUpdateTract: updateTract,\n  onUpdateTradeZoneBounds: updateTradeZoneBounds,\n  onUpdateTransportation: updateTransportation\n};\nexport default withRouter(connect(mapStateToProps, mapActionsToProps)(SimpleMap));\n\nfunction distance(lat1, lon1, lat2, lon2, unit) {\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  } else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n    if (dist > 1) {\n      dist = 1;\n    }\n\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n\n    if (unit == \"K\") {\n      dist = dist * 1.609344;\n    }\n\n    if (unit == \"N\") {\n      dist = dist * 0.8684;\n    }\n\n    return dist;\n  }\n}","map":{"version":3,"names":["React","Component","GoogleMapReact","getNearby","getPages","getPhoto","connect","createSelector","updatePlaces","updateActivePlace","ReactDOMServer","DemographicsPanel","updateTract","Form","getPoints","ZIP","TRADE_ZONE","GOOGLE_KEY","google","BUSINESS_TYPES","POI_TYPES","renderCircle","renderMarker","renderComplexMarker","renderLargeMarker","renderInfoContent","BLUE_MARKER","YELLOW_MARKER","GREEN_MARKER","RED_MARKER","BLUE_DOT_05","YELLOW_DOT_25","YELLOW_DOT_3","BLUE_DOT_5","activeSelector","addressSelector","businessTypeSelector","dataRangeSelector","placesSelector","stateSelector","tractSelector","zipSelector","isCitySelector","tradeZoneBoundsSelector","transportationSelector","geoUnitSelector","statsSelector","SliderSwitch","Button","updateTradeZoneBounds","ReactStreetview","updateTransportation","createTradeZoneCartography","FadeLoader","getSubwayTotals","getListingByPlaceId","withRouter","MediaQuery","Toolbar","PlacesList","ChartsPanel","TransportationPanel","getCounty","Boroughs","infoWindow","maps","InfoWindow","SimpleMap","constructor","props","loadListing","res","address","place","place_id","undefined","length","setState","hasListing","listing","updatePlacesFromRedux","type","display_value","index","places_count","poi","business_type","business_type_option","onUpdatePlaces","clearMarkers","loadPlaceType","updatedMarkers","Map","state","markers","forEach","e","i","marker","setMap","places","set","onHandleCenter","center","siteView","updateMarkers","map","markers_to_keep","markerMap","Array","from","id","img","has","geometry","location","name","updateInfoWindow","key","value","addListener","onUpdateActivePlace","updatePlaceDetails","setContent","renderToStaticMarkup","getInfoContent","open","getPlaceDetails","callback","service","PlacesService","request","placeId","fields","getDetails","status","PlacesServiceStatus","OK","console","error","getOpen","opening_hours","answer","is_open","updateMarker","active_place","setIcon","handleSwitch","checked","renderCartography","clearCartography","onHandleSite","handleChange","event","onUpdateTransportation","transportation","loadNearbySubways","data","token","places_cache","get","tokens_cache","subwayCoords","entries","push","subway_data","dist","distance","coords","lat","lng","G_LAT","G_LNG","sort","x","y","transportObj","JSON","parse","stringify","subwayMap","G_TOTAL_ENT","G_LINES","subways","generateHeading","sv","StreetViewService","panorama","StreetViewPanorama","document","getElementById","position","getPanorama","radius","StreetViewStatus","marker_pano","Marker","heading","spherical","computeHeading","latLng","getPosition","setPov","pitch","navigateToListing","url","listingId","history","openToolBar","toolsOpen","myRef","createRef","streetView","place_details","place_photos","address_line","street","city","zip","boundaries","cartography","display_cartography","cartographyLoaded","aerial","zoom","mapType","MapTypeId","SATELLITE","loadingCart","mapOptions","streetViewControl","scaleControl","fullscreenControl","styles","featureType","elementType","stylers","visibility","gestureHandling","disableDoubleClickZoom","minZoom","maxZoom","mapTypeControl","mapTypeId","ROADMAP","mapTypeControlOptions","style","MapTypeControlStyle","HORIZONTAL_BAR","ControlPosition","BOTTOM_CENTER","mapTypeIds","HYBRID","zoomControl","clickableIcons","bind","onUpdateTract","lessPlaces","loadAllPlaces","loadMorePlaces","loadDefaultPlaces","exampleRef","getopen","onBusinessFormChange","loadZipCartography","onPlacesCountChange","updateRadii","initCache","onUpdateTradeZoneBounds","loadTradeZoneCartography","onPoiFormChange","setInterval","isBound","getMap","types","includes","componentDidMount","window","scrollTo","top","behavior","isFirstTimeUser","updateIsFirstTime","innerWidth","runJoyRideTutorial","componentWillUnmount","componentDidUpdate","prevProps","prevState","toString","trigger","all_markers","values","markers_to_delete","slice","m","arr","data_range","showSubways","defaultPlace","business_option","replace","stats","tradezone","tradeZone_bounds","mCartography","Object","assign","collection","concat","feature","remove","featureSet","addGeoJson","setTimeout","addressPlace","details","icon","cached_places","morePlaces","hasCallback","target","updatedData","apply","Manhattan","Brooklyn","Queens","Bronx","Staten","county","circle1Distance","circle2Distance","circle1","circle2","points","Point","counter","divisor","increment","outerRing","updateMapCenter","photos","photo_reference","render","apiIsLoaded","yourBusinessMarker","setZIndex","content","MapButtons","streetViewContainer","pov","source","StreetViewSource","OUTDOOR","MapBundle","color","height","innerHeight","getHelpers","defaultProps","defaultCenter","defaultzoom","mapStateToProps","tract","isCity","geo_unit","mapActionsToProps","lat1","lon1","lat2","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","sin","cos","acos"],"sources":["/Users/sumanthvarma/Desktop/frontend/src/Components/Map/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { getNearby, getPages, getPhoto } from '../../Requests/map-requests' \nimport '../../css/App.scss';\nimport { connect } from 'react-redux'\nimport { createSelector } from 'reselect';\nimport { updatePlaces } from '../../Actions/places-actions'\nimport { updateActivePlace } from '../../Actions/active-actions'\nimport ReactDOMServer from 'react-dom/server';\nimport DemographicsPanel from './Panels/DemographicsPanel'\nimport {updateTract} from '../../Actions/tract-actions'\nimport Form from 'react-bootstrap/Form'\nimport { getPoints } from '../../Helpers/TradeZone'\nimport { ZIP, TRADE_ZONE} from './Panels/DemographicsPanel'\nimport { GOOGLE_KEY, google, BUSINESS_TYPES, POI_TYPES } from '../../Constants.js'\nimport { renderCircle, renderMarker, renderComplexMarker, renderLargeMarker, renderInfoContent, BLUE_MARKER, YELLOW_MARKER, GREEN_MARKER, RED_MARKER, BLUE_DOT_05, YELLOW_DOT_25, YELLOW_DOT_3, BLUE_DOT_5 } from './GoogleMaps/GoogleMapComponents'\nimport { activeSelector, addressSelector, businessTypeSelector, dataRangeSelector, placesSelector, stateSelector, tractSelector, zipSelector, isCitySelector, tradeZoneBoundsSelector, transportationSelector, geoUnitSelector, statsSelector } from '../../Reducers/selectors'\nimport SliderSwitch from '../UI/SliderSwitch'\nimport Button from 'react-bootstrap/Button';\nimport { updateTradeZoneBounds } from '../../Actions/tradeZoneBoundaries-actions'\nimport ReactStreetview from 'react-streetview';\nimport { updateTransportation} from '../../Actions/transportation-actions'\nimport { createTradeZoneCartography } from '../../Requests/locations-requests'\nimport FadeLoader from '../UI/FadeLoader'\nimport { getSubwayTotals } from '../../Requests/subway-requests';\nimport { getListingByPlaceId } from \"../../Requests/listings-requests\"\nimport { withRouter } from 'react-router-dom'\nimport MediaQuery from 'react-responsive'\nimport Toolbar from '../Mobile/Toolbar'\nimport PlacesList from './Panels/PlacesList'\nimport ChartsPanel from './Panels/ChartsPanel'\n// import CommentsPanel from './Panels/CommentsPanel'\nimport TransportationPanel from './Panels/TransportationPanel'\nimport { getCounty } from '../utils/distance'\nimport { Boroughs } from '../utils/zipcodes'\n\nconst infoWindow =  new google.maps.InfoWindow()\n\nclass SimpleMap extends Component {\n  static defaultProps = {\n    defaultCenter: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    defaultzoom: 11\n  };\n\n  constructor(props) {\n    super(props)\n    this.myRef = React.createRef();\n    this.streetView = React.createRef();\n    this.service = new google.maps.StreetViewService;\n    // let defaultPlace = this.props.business_type.type\n    // let type = this.props.business_type.type\n    // let business_option = type.replace(/_/g, ' ')\n    // if (type == 'lodging') type = 'hotels /lodging'\n    // else if (defaultPlace == 'residential') {\n    //   defaultPlace = 'establishment'\n    //   business_option = 'all'\n    // }\n\n    this.state = {\n      center: this.props.center,\n      map : undefined,\n      markers : new Map(),\n      place_details : new Map(),\n      place_photos : new Map(),\n      places_cache : new Map(),\n      tokens_cache : new Map(),\n      places_count : 20,\n      address_line : this.props.address.street + ', ' + this.props.address.city + ' ' + this.props.address.state + ', ' + this.props.address.zip,\n      boundaries : getPoints(this.props.center, 0.804, 1),\n      cartography : {},\n      display_cartography: true,\n      business_type: '', //defaultPlace,\n      cartographyLoaded : false,\n      poi : 'none',\n      business_type_option: '', //business_option,\n      aerial : true,\n      zoom : this.props.zoom,\n      siteView: false,\n      mapType : google.maps.MapTypeId.SATELLITE,\n      loadingCart : {[ZIP] : true, [TRADE_ZONE] : true},\n      mapOptions : {\n        streetViewControl: true,\n        scaleControl: true,\n        fullscreenControl: false,\n        styles: [{\n            featureType: \"poi.business\",\n            elementType: \"labels\",\n            stylers: [{\n                visibility: \"off\"\n            }]\n        }],\n        gestureHandling: \"greedy\",\n        disableDoubleClickZoom: true,\n        minZoom: 5,\n        maxZoom: 100,\n        mapTypeControl: true,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        mapTypeControlOptions: {\n            style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,\n            position: google.maps.ControlPosition.BOTTOM_CENTER,\n            mapTypeIds: [\n              google.maps.MapTypeId.ROADMAP,\n              google.maps.MapTypeId.SATELLITE,\n              google.maps.MapTypeId.HYBRID\n            ]\n        },\n        zoomControl: true,\n        clickableIcons: false\n      },\n\n      toolsOpen : false\n    }  \n  \n    this.onUpdatePlaces = this.onUpdatePlaces.bind(this);\n    this.onUpdateActivePlace = this.onUpdateActivePlace.bind(this);\n    this.onUpdateTract = this.onUpdateTract.bind(this)\n    this.lessPlaces = this.lessPlaces.bind(this);\n    this.loadAllPlaces = this.loadAllPlaces.bind(this);\n    this.loadMorePlaces = this.loadMorePlaces.bind(this);\n    this.loadDefaultPlaces = this.loadDefaultPlaces.bind(this);\n    this.exampleRef = React.createRef()\n    this.updateMarkers = this.updateMarkers.bind(this)\n    this.updateMarker = this.updateMarker.bind(this)\n    this.updateInfoWindow = this.updateInfoWindow.bind(this)\n    this.getopen  = this.getOpen.bind(this)\n    this.getPlaceDetails = this.getPlaceDetails.bind(this)\n    this.updatePlaceDetails = this.updatePlaceDetails.bind(this)\n    this.onBusinessFormChange = this.onBusinessFormChange.bind(this);\n    this.loadZipCartography = this.loadZipCartography.bind(this)\n    this.renderCartography = this.renderCartography.bind(this)\n    this.getInfoContent = this.getInfoContent.bind(this)\n    this.handleSwitch = this.handleSwitch.bind(this)\n    this.clearCartography = this.clearCartography.bind(this)\n    this.onPlacesCountChange = this.onPlacesCountChange.bind(this)\n    this.updateRadii =this.updateRadii.bind(this)\n    this.initCache = this.initCache.bind(this)\n    this.onUpdateTradeZoneBounds = this.onUpdateTradeZoneBounds.bind(this)\n    this.loadTradeZoneCartography = this.loadTradeZoneCartography.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.onPoiFormChange = this.onPoiFormChange.bind(this)\n    \n    // to-do create function updateInfoWindow\n    setInterval(async () => {\n        let isBound = (infoWindow.getMap() ? true : false)\n        if (!isBound && infoWindow.marker != undefined && infoWindow.marker.key != 'your_business') {\n          let img = ''\n          if (infoWindow.marker.place.place_id == this.props.address.place.place_id) {\n            img = BLUE_MARKER\n          }\n          else if (this.props.business_type.type != 'residential' && infoWindow.marker.place.types.includes(this.props.business_type.type)) {\n            img = RED_MARKER\n          } else {\n            img = YELLOW_MARKER\n          }\n          infoWindow.marker.marker.setIcon(img)\n          this.onUpdateActivePlace(false)\n        }\n    }, 500);\n  }\n\n  async componentDidMount() {\n    window.scrollTo({ top: 0, behavior: 'smooth' })\n    this.initCache()\n    await this.loadListing()\n\n    // first time user check\n    if (this.props.isFirstTimeUser) {\n      this.props.updateIsFirstTime(false)\n      if (window.innerWidth > 550) {\n        this.props.runJoyRideTutorial()\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.onUpdatePlaces([])\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    // active place change\n    if (this.props.active_place && this.props.active_place !== prevProps.active_place) \n      if (this.props.active_place.toString().length > 0) {\n        this.setState({center : this.props.active_place.geometry.location})\n        // highlight marker on map\n        if (prevProps.active_place.toString().length > 0) {\n          this.updateMarker(this.state.markers.get(prevProps.active_place.place_id))\n        }\n        this.state.markers.get(this.props.active_place.place_id).marker.setIcon(GREEN_MARKER)\n        google.maps.event.trigger(this.state.markers.get(this.props.active_place.place_id).marker, 'click')\n      }\n\n    // update markers \n    if (this.props.places !== prevProps.places && !(!this.state.siteView && prevState.siteView)) {\n      if (this.state.map != undefined) {\n        let all_markers =  Array.from(this.state.markers.values())\n        let markers_to_delete = [];\n        let markers_to_keep = new Map(); \n\n        if (prevProps.places.length > this.props.places.length) { \n          markers_to_delete = all_markers.slice(this.props.places.length, prevProps.places.length)\n          all_markers.slice(0, this.props.length).forEach(m => markers_to_keep.set(m.place_id, 0)) // set placeholder, actual value not needed\n        } \n        else if (prevProps.places.length < this.props.places.length) {\n   \n          let arr = all_markers.slice(0, prevProps.places.length)\n          arr.forEach(m => markers_to_keep.set(m.place_id, 0)) \n        } else {\n          this.clearMarkers()\n        }\n\n        // remove necesary markers\n        markers_to_delete.forEach(m => m.marker.setMap(null))\n        \n        // update all markers ....\n        this.updateMarkers(this.state.map, markers_to_keep)\n      }\n    }\n\n    // update geojson\n    if (this.state.map !== undefined) {\n      if (this.props.data_range !== prevProps.data_range) {\n        if (this.state.display_cartography)\n          await this.renderCartography()\n      }   \n    }\n\n    // reload subways on address change\n    if (prevProps.address != this.props.address) {\n      this.clearMarkers()\n      this.loadListing()\n  //    this.clearCartography()\n\n    }\n\n    // show subways on transportation change\n    if (prevProps.transportation.showSubways != this.props.transportation.showSubways) {\n      await this.loadNearbySubways()\n      this.updatePlacesFromRedux('subway_station', 'subway station', 4)\n    }\n\n\n    // change business type from demo panel\n    if (prevProps.business_type != this.props.business_type) {\n\n      let defaultPlace = this.props.business_type.type\n      let type = this.props.business_type.type\n      let business_option = type.replace(/_/g, ' ')\n      if (type == 'lodging') type = 'hotels /lodging'\n      else if (defaultPlace == 'residential') {\n        defaultPlace = 'establishment'\n        business_option = 'all'\n      }\n    //  await this.setState({ business_type : type, business_type_option : business_option })\n      this.clearMarkers()\n      this.updateMarkers(this.state.map, new Map())\n    }\n\n    // zip cart\n    if (prevProps.stats.zip !== this.props.stats.zip) {\n      this.loadZipCartography()  \n    }\n\n    //TZ cart\n    if (prevProps.stats.tradezone !== this.props.stats.tradezone) {\n      this.loadTradeZoneCartography()\n    }\n  }\n\n  loadListing = async () => {\n    let res = await getListingByPlaceId(this.props.address.place.place_id)\n    if (res === undefined) return;\n    if (res.length > 0) {\n      this.setState({ hasListing : true, listing: res[0] })\n    }\n  }\n\n  onUpdateTradeZoneBounds(tradeZone_bounds) {\n    this.props.onUpdateTradeZoneBounds(tradeZone_bounds)\n  }\n\n  async loadZipCartography() {\n    if (this.props.address.zip == undefined) return;\n      let mCartography = Object.assign({}, this.state.cartography)\n      let data = [this.props.stats.zip] \n      mCartography.zip = data\n        \n      this.setState({cartography : mCartography, loadingCart : {...this.state.loadingCart, [ZIP]: false}})\n      // init geojson rendering\n      this.renderCartography()\n  }\n    \n  async loadTradeZoneCartography() {\n    // get new tz cart with bounds \n    let data =  this.props.stats.tradezone.collection \n\n    let mCartography = Object.assign({}, this.state.cartography)\n    mCartography.tradezone = data\n    await this.setState({ cartography : mCartography, cartographyLoaded : true, loadingCart : {...this.state.loadingCart, [TRADE_ZONE] : false } })\n    this.renderCartography()\n  }\n\n\n\n  initCache() {\n     for (let type of BUSINESS_TYPES.concat(POI_TYPES).concat(['establishment'])) {\n       if (type == 'hotels /lodging') type = 'lodging'\n       this.state.places_cache.set(type, new Map())\n     }\n  }\n\n  clearCartography() {\n    if (this.state.map)\n    this.state.map.data.forEach((feature) => {\n      this.state.map.data.remove(feature)\n    })\n  }\n\n  renderCartography() {\n    // clear data layer \n      this.clearCartography()\n      // render cartography\n      if (this.props.data_range == ZIP) {\n        if (this.state.cartography.zip !== undefined && this.state.map) {\n          this.state.cartography.zip.forEach(featureSet => this.state.map.data.addGeoJson(featureSet))\n        } else {\n          setTimeout(() => this.renderCartography(), 100)\n        }\n      } \n      else if (this.props.data_range == TRADE_ZONE) {\n        if (this.state.cartography.tradezone !== undefined && this.state.map) {\n          this.state.cartography.tradezone.forEach(featureSet => this.state.map.data.addGeoJson(featureSet))\n       } else {\n         setTimeout(() => this.renderCartography(), 100)\n       }\n    }\n}\n\n  async loadDefaultPlaces() {\n    \n    // TO-DO: get placeId with address or from autofill\n    if (this.props.address.place.types.includes('establishment')) {  // get and set place for address if applicable \n      let place = this.props.address.place\n      await this.setState({ addressPlace : place})\n      this.getPlaceDetails(this.state.map, this.props.address.place.place_id, async (details) => {\n\n        place.icon = details.icon\n        place.name = details.name\n        place.place_id = details.id\n        this.state.place_details.set(place.id, details)\n      })\n    } \n\n    // await getNearby(this.props.address, this.state.business_type, (data, token) => {\n   \n    //   var morePlaces = this.props.places.concat(data)\n    //   this.setState({places: morePlaces})\n    //   for (let place of morePlaces) {\n    //     if (!this.state.places_cache.get(this.state.business_type).has(place.place_id)) {\n    //       this.state.places_cache.get(this.state.business_type).set(place.place_id, place)\n    //     } \n    //   }\n    //   this.state.tokens_cache.set(this.state.business_type, token)\n    //   if (this.props.address.place.types.includes('establishment')) {  // get and set place for address if applicable \n    //     this.getPlaceDetails(this.state.map, this.props.address.place.place_id, async (details) => {\n    //       let place = this.props.address.place\n    //       place.icon = details.icon\n    //       place.name = details.name\n    //       place.place_id = details.id\n    //       this.state.place_details.set(place.id, details)\n    //       await this.setState({ addressPlace : place})\n    //       this.onUpdatePlaces(data)\n    //     })\n    //   } else {\n    //     this.onUpdatePlaces(data)\n    //   }\n    //   this.setState({ places_count : 20 })\n    // })     \n  }\n\n  loadPlaceType(type, index) {\n\n    let cached_places = Array.from(this.state.places_cache.get(type).values())\n    if (cached_places.length == 0) {\n      // if not cached load places\n      getNearby(this.props.address, type, (data, token) => {\n   //     var morePlaces = this.props.places.concat(data)\n\n        this.setState({places: data})\n\n        // cache loaded places\n        for (let place of data) {\n          if (!this.state.places_cache.get(type).has(place.place_id)) {\n            this.state.places_cache.get(this.state.business_type).set(place.place_id, place)\n          } \n        }\n          this.state.tokens_cache.set(type, token)\n          this.onUpdatePlaces(data)\n        })\n      // if already cached \n    } else {\n      if (index == undefined) {\n        this.setState({places: cached_places.slice(0, 20)})\n        this.onUpdatePlaces(cached_places.slice(0,20))\n      } else {\n        this.setState({places: cached_places.slice(0, index)})\n        this.onUpdatePlaces(cached_places.slice(0, index))\n      }\n    }\n  }\n\n  loadAllPlaces() {\n    getNearby(this.props.address, 'establishment', (data, token) => {\n      var morePlaces = this.props.places.concat(data)\n      this.setState({places: morePlaces})\n      this.setState({ places_count : 20 })\n      this.state.tokens_cache.set('establishment', token)\n      this.onUpdatePlaces(data)\n    })\n  }\n\n  loadMorePlaces(index, hasCallback, callback) {\n        let cached_places = Array.from(this.state.places_cache.get(this.state.business_type).values())\n        if (cached_places.length > index) {\n          var morePlaces = this.state.places.concat(cached_places.slice(index, index + 20))\n          this.setState({places: morePlaces}, () => {\n            this.onUpdatePlaces(morePlaces)\n            if (hasCallback) { callback() }\n          })\n        } else {\n        getPages(this.state.tokens_cache.get(this.state.business_type), (data, token) => {\n        this.state.tokens_cache.set(this.state.business_type, token)\n        var morePlaces = this.props.places.concat(data)\n        for (let place of morePlaces) {\n          if (!this.state.places_cache.get(this.state.business_type).has(place.place_id)) {\n            this.state.places_cache.get(this.state.business_type).set(place.place_id, place)\n          } \n        }\n        this.setState({places: morePlaces}, () => {\n          this.onUpdatePlaces(morePlaces)\n          if (hasCallback) { callback() }\n        })\n      })\n    }\n  }\n  \n  lessPlaces() {\n    if (this.props.places.length > 20) {\n      var places = this.props.places\n      places = places.slice(0, (places.length-20))\n      this.setState({places: places})\n      this.onUpdatePlaces(places)\n    }\n  }\n\n  async onBusinessFormChange(event) {\n  \n    let type = event.target.value.replace(/ /g, '_')\n    if (type == 'hotels_/lodging') type = 'lodging'\n    else if (type == 'all') type = 'establishment'\n\n    // clear places\n    if (type == 'none') {\n      this.setState({places_count : 0, \n        business_type_option: event.target.value,\n        business_type: type,\n        poi : 'none'\n      }, () => this.onUpdatePlaces([]))\n\n    } else {\n      this.setState({places_count : 20, \n        business_type_option: event.target.value,\n        business_type: type,\n        poi : 'none'\n      })\n      this.clearMarkers()\n      await this.loadPlaceType(type, 0)\n    }\n  }\n\n  async onPoiFormChange(event) {\n    let type = event.target.value.replace(/ /g, '_')\n    if (type == 'hotels_/lodging') type = 'lodging'\n    else if (type == 'all') type = 'establishment'\n\n    if (type == 'none') {\n        this.setState({places_count : 0, \n          poi: event.target.value,\n          business_type : type,\n          business_type_option : 'none'\n        }, () => this.onUpdatePlaces([]))\n      \n    } else {\n      this.setState({places_count : 20, \n        poi : event.target.value, \n        business_type : type,\n        business_type_option : 'none'\n      })\n      this.clearMarkers()\n      await this.loadPlaceType(type)\n    }\n  }\n\n  updatePlacesFromRedux = async (type, display_value, index) => {\n    if (type == 'hotels_/lodging') type = 'lodging'\n    else if (type == 'all') type = 'establishment'\n\n    if (type == 'none') {\n        this.setState({places_count : 0, \n          poi: display_value,\n          business_type : type,\n          business_type_option : 'none'\n        }, () => this.onUpdatePlaces([]))\n      \n    } else {\n      this.setState({places_count : index+1, \n        poi : display_value, \n        business_type : type,\n        business_type_option : 'none'\n      })\n      this.clearMarkers()\n      await this.loadPlaceType(type, index)\n    }\n  }\n\n  clearMarkers = () => {\n    // clear markers \n    let updatedMarkers = new Map()\n    this.state.markers.forEach((e, i) => {\n       e.marker.setMap(null)\n       if (i < this.props.places.length) \n          updatedMarkers.set(e.place_id, e)\n    })\n    this.setState({ markers: updatedMarkers})\n  }\n\n\n  // to do clean up & cache ffs\n  onPlacesCountChange(event) {\n    this.setState({places_count: event.target.value})\n      switch (event.target.value) {\n        case '20':\n            var places = this.props.places\n            places = places.slice(0, 20)\n            this.setState({places: places})\n            this.onUpdatePlaces(places)\n            break;\n\n        case '40':\n            if (this.props.places.length < 40) {\n              this.loadMorePlaces(20, false)\n            } else {\n              var places = this.props.places\n              places = places.slice(0, 40)\n              this.setState({places: places})\n              this.onUpdatePlaces(places)\n            }\n            break;\n\n        case '60':\n            if (this.props.places.length < 40) {\n              this.loadMorePlaces(20, true, ()=> {\n                this.loadMorePlaces(40, false)\n              })\n              \n            } else if (this.state.places.length == 40) {\n              this.loadMorePlaces(40, false)\n            }\n            else {\n              var places = this.props.places\n              places = places.slice(0, 60)\n              this.onUpdatePlaces(places)\n            }\n            break;\n      }\n  }\n\n  onUpdatePlaces(data) {\n    if (this.props.address.place.types.includes('establishment')) { // check not to add two markers id address contains place\n      let updatedData = [this.state.addressPlace]\n      data.map(e => {\n        if (e.place_id === undefined) return\n        if (e.place_id !== this.state.addressPlace.place_id)\n          updatedData.push(e)\n      })\n      this.props.onUpdatePlaces(updatedData)\n    } else \n      this.props.onUpdatePlaces(data)\n  }\n  \n  onUpdateActivePlace(data) {\n    this.props.onUpdateActivePlace(data)\n  }\n  onUpdateTract(data) {\n    this.props.onUpdateTract(data)\n  }\n  getInfoContent(place) {\n   return renderInfoContent.apply(this, [place])\n  }\n\n  async updateRadii() {\n    const { Manhattan, Brooklyn, Queens, Bronx, Staten } = Boroughs;\n\n    const county = await getCounty(this.props.address.zip)\n      if (!county) {\n          // NJ, Long Island    \n          let circle1Distance = 4828 // 3 mi\n          let circle2Distance = 8046 // 0.5 mi\n          const circle1 = renderCircle(circle1Distance, \"#ffff00\", this.state.map, this.state.center) \n          const circle2 = renderCircle(circle2Distance, \"#0000ff\", this.state.map, this.state.center) \n          // to-do cleanup, add label\n          let points = getPoints(this.state.center, 4.828, 1)\n          renderComplexMarker('circle1', points[0], this.state.map, '3 mi', YELLOW_DOT_3, new google.maps.Point(60, 60))\n          points = getPoints(this.state.center, 8.046, 1)\n          renderComplexMarker('circle2', points[0], this.state.map, '5 mi', BLUE_DOT_5, new google.maps.Point(60, 60))\n   \n          // render test points\n          points = getPoints(this.state.center, 4.8225, 1)\n          let counter = 1\n          let divisor = 10;\n          let increment = 4.828 / divisor //4.828 = exact 3 miles 0.804672\n                \n                for (let i=1; i <= divisor; i++) {\n                    points = points.concat(getPoints(this.state.center, i*increment, counter*8))\n                    counter+=1\n                }\n  \n          // render TZ pins \n          points.forEach((e, i) => {\n  //          renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, GREEN_MARKER)\n          })\n        \n          let outerRing = getPoints(this.state.center, 8, 80)\n          outerRing.forEach((e,i) => {\n   //        renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, RED_MARKER)\n          })\n        return;\n    }\n   \n\n      if (county === Manhattan) {\n        // WALKING\n        let circle1Distance = 402 // 0.25 mi\n        let circle2Distance = 804 // 0.5 mi\n         const circle1 = renderCircle(circle1Distance, \"#ffff00\", this.state.map, this.state.center) \n         const circle2 = renderCircle(circle2Distance, \"#0000ff\", this.state.map, this.state.center) \n        // to-do cleanup, add label\n        let points = getPoints(this.state.center, 0.402, 1)\n        renderComplexMarker('circle1', points[0], this.state.map, '0.25 mi', YELLOW_DOT_25, new google.maps.Point(60, 60))\n        points = getPoints(this.state.center, 0.804, 1)\n        renderComplexMarker('circle2', points[0], this.state.map, '0.5 mi', BLUE_DOT_05, new google.maps.Point(60, 60))\n      \n        // render test points\n        let divisor = 4;\n        let increment = 0.35 / divisor // 0.2174799\n        let counter = 1 \n        for (let i=1; i <= divisor; i++) {\n            points = points.concat(getPoints(this.state.center, i*increment, counter*8))\n            counter+=1\n        }\n                \n        points.forEach((e, i) => {\n  //          renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, GREEN_MARKER)\n        })\n\n        let outerRing = getPoints(this.state.center, .800, 50)\n        outerRing.forEach((e,i) => {\n  //          renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, RED_MARKER)\n        })\n      \n      } else  {\n        // Brooklyn, Staten Island, Bronx    \n        let circle1Distance = 804  // 0.5 mi\n        let circle2Distance =  4828 // 3 mi\n        const circle1 = renderCircle(circle1Distance, \"#0000ff\", this.state.map, this.state.center) \n        const circle2 = renderCircle(circle2Distance, \"#ffff00\", this.state.map, this.state.center) \n        // to-do cleanup, add label\n        let points = getPoints(this.state.center, 0.804, 1)\n        renderComplexMarker('circle1', points[0], this.state.map, '0.5 mi', BLUE_DOT_05, new google.maps.Point(60, 60))\n        points = getPoints(this.state.center, 4.828, 1)\n        renderComplexMarker('circle1', points[0], this.state.map, '3 mi', YELLOW_DOT_3, new google.maps.Point(60, 60))\n \n        // render test points\n        points = getPoints(this.state.center, 4.8225, 1)\n        let counter = 1\n        let divisor = 5;\n        let increment = 0.8/ divisor //4.828 = exact 3 miles 0.804672\n        //  0.804672km = 0.5miles\n        \n        for (let i=1; i <= divisor; i++) {\n            points = points.concat(getPoints(this.state.center, i*increment, counter*8))\n            counter+=1\n        }\n\n        points.forEach((e, i) => {\n   //       renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, GREEN_MARKER)\n        })\n      \n        let outerRing = getPoints(this.state.center, 4.828, 80)\n        outerRing.forEach((e,i) => {\n       //  renderMarker(i, e, this.state.map, e.lat + ', ' + e.lng, RED_MARKER)\n        })\n    }\n  }\n\n  onHandleCenter= () => {\n    this.setState({ center : this.props.center })\n    if (this.state.siteView) this.setState({siteView: false})\n  }\n  \n  updateMapCenter(coords)  {\n    this.setState({\n        center: coords\n    });\n} \n\n   // markers\n  updateMarkers = (map, markers_to_keep) =>  {\n    let markerMap = this.state.markers\n    \n    \n    Array.from(this.props.places).map((place, i) => {\n      var id= place.place_id\n      var img = ''\n      var marker;\n      // filter preexisting places\n      if (!markers_to_keep.has(id)) { \n\n          if (this.props.business_type.type != 'residential' && this.props.business_type.type == this.state.business_type) {\n            img = RED_MARKER\n          } else {\n            img = YELLOW_MARKER\n          }\n            marker = renderMarker(i, place.geometry.location, map, place.name, img)\n            markerMap.set(id, {marker: marker, place: place})\n      }\n    })\n  this.setState({ markers : markerMap})\n  this.updateInfoWindow(map)\n};\n\nupdateInfoWindow = (map) => Array.from(this.state.markers, ([key, value]) =>  {\n\n  // to close window on exit\n  value.marker.addListener('click',  () => {\n       this.onUpdateActivePlace(value.place)\n        this.updatePlaceDetails(() => {\n          infoWindow.setContent(ReactDOMServer.renderToStaticMarkup(this.getInfoContent(value.place)))\n          infoWindow.marker = value\n          infoWindow.open(map, value.marker) \n        });\n       })\n});\n\nupdatePlaceDetails(callback) {\n\n  // get details\n  if (!this.state.place_details.has(this.props.active_place.place_id)) {\n    this.getPlaceDetails(this.state.map, this.props.active_place.place_id, (details) => {\n      this.state.place_details.set(this.props.active_place.place_id, details)\n\n         // get photo\n    if (!this.state.place_photos.has(this.props.active_place.place_id)) {\n      if (this.props.active_place.photos !== undefined) {\n       getPhoto(this.props.active_place.photos[0].photo_reference, 400, 400, (data) => {\n        this.state.place_photos.set(this.props.active_place.place_id, data.url)\n        callback()\n      })\n      } else {\n        callback()\n      }\n    }\n    })\n  } else {\n    callback()\n  }\n};\n\ngetPlaceDetails = (map, place_id, callback) => {\n  var service = new google.maps.places.PlacesService(map);\n  var request = {\n    placeId: place_id,\n    fields: ['id', 'name', 'icon', 'formatted_address', 'website']\n  };\n  \n     // get details\n    service.getDetails(request, (place, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        callback(place)\n      } else {\n        console.error('error', status)\n      }\n    });\n};\n\ngetOpen = (opening_hours) => {\n  if (opening_hours === undefined)\n    return 'Unknown'\n  else {\n    let answer = (opening_hours.is_open) ? \"Yes\" : \"No\"\n    return answer\n  }\n};\n\nupdateMarker = (marker) => {\n  if (marker == undefined) \n    return; \n\n  var img = ''\n  if (marker.place.place_id == this.props.address.place.place_id) {\n    img = BLUE_MARKER\n  }\n  else if (marker.place_id === this.props.active_place.place_id) {\n    img = GREEN_MARKER\n  } else if (this.props.business_type.type != 'residential' && this.props.business_type.type == this.state.business_type){\n    img = RED_MARKER\n  } else {\n    img = YELLOW_MARKER\n  }\n  marker.marker.setIcon(img)\n};\n\nhandleSwitch = (checked) => {\n  if (checked) {\n    this.renderCartography()\n  } else {\n    this.clearCartography()\n  }\n};\n\nonHandleSite = (checked) => {\n  if (checked) {\n    this.setState({ siteView : true})\n  } else {\n    this.setState({ siteView : false})\n  }\n};\n\nhandleChange = (event) => {\n  this.setState({ center : event.center})\n};\n\n// subways \nonUpdateTransportation = async (transportation) => {\n  this.props.onUpdateTransportation(transportation)\n};\n\nloadNearbySubways = async () => {\n  let type = 'subway_station'\n  getNearby(this.props.address, type, async (data, token) => {\n      // cache loaded places\n      for (let place of data) {\n        if (!this.state.places_cache.get(type).has(place.place_id)) {\n          this.state.places_cache.get(type).set(place.place_id, place)\n        } \n      }\n      this.state.tokens_cache.set(type, token)\n      let subwayCoords = []\n      Array.from(this.state.places_cache.get(type).entries()).map(([key, value], i) => {\n        if ( i > 4) return;\n        subwayCoords.push(value.geometry.location)\n      })\n      \n      let subway_data = await getSubwayTotals(subwayCoords)\n      // Calculate distance //////\n      subway_data.forEach(e => {\n        let dist= distance(this.props.address.coords.lat, this.props.address.coords.lng,\n          e.data.G_LAT, e.data.G_LNG)\n          e.distance = dist\n      })\n\n      subway_data.sort((x, y) => {\n        if (x.distance < y.distance) {\n          return -1;\n        }\n        if (x.distance > y.distance) {\n          return 1;\n        }\n        return 0;\n      })\n      \n        let transportObj = JSON.parse(JSON.stringify(this.props.transportation))\n        if (transportObj == '') { transportObj = {}}\n    \n        // clean up subway data\n        let subwayMap = new Map()\n        for (let i=0; i< subway_data.length; i++) {\n          if (!subwayMap.has(subway_data[i].name)) {\n            subwayMap.set(subway_data[i].name, subway_data[i].data)\n          } else {\n            // check if values are equal, if so arggregate to one location\n            if (subwayMap.get(subway_data[i].name).G_TOTAL_ENT == subway_data[i].data.G_TOTAL_ENT) {\n              subwayMap.set(subway_data[i].name, \n                {...subwayMap.get(subway_data[i].name), \n                  G_LINES : subwayMap.get(subway_data[i].name).G_LINES +'-'+ subway_data[i].data.G_LINES \n                })\n            }\n          }\n        }\n        transportObj.subways = subwayMap\n        await this.onUpdateTransportation(transportObj)\n\n    })       \n};\n\ngenerateHeading = () => {\n  var sv = new google.maps.StreetViewService();\n // initialize a new panorama API object and point to the element with ID streetview as container\n var panorama = new  google.maps.StreetViewPanorama(document.getElementById('pano'), {position: this.props.center});\n\n    sv.getPanorama({\n        location: this.props.center,\n        radius: 50\n    }, (data, status) => {\n      if (status === google.maps.StreetViewStatus.OK) {\n  \n          var marker_pano = new google.maps.Marker({\n              position: this.props.center,\n              map: panorama\n          });\n  \n          var heading = google.maps.geometry.spherical.computeHeading(data.location.latLng, marker_pano.getPosition());\n  \n          panorama.setPov({\n              heading: heading,\n              pitch: 0\n          });\n          this.setState({heading: heading})\n      }\n  });\n}\n\n// navigate to listing view\nnavigateToListing = () => {\n  let url = '/listing/' + this.state.listing.listingId\n  this.props.history.push(url)\n}\n\nopenToolBar = () => {\n  this.setState({ toolsOpen : !this.state.toolsOpen })\n}\n\n  render() {\n    const apiIsLoaded = (map, maps, center) => {\n      this.state.map = map\n  //    if (!this.props.address.place.types.includes('establishment')) {\n        let yourBusinessMarker = renderMarker('your_business', center, map, 'Your Business', BLUE_MARKER)\n        yourBusinessMarker.setZIndex(9999)\n        const content = '<h3>Your Location</h3>'\n   //     var content ='<h3>Your ' + this.props.business_type.type.toString() +'</h3>'\n          yourBusinessMarker.addListener('click', () => {\n            infoWindow.setContent(content)\n            infoWindow.open(map, yourBusinessMarker)\n            infoWindow.marker = yourBusinessMarker\n        })\n//     }\n      this.updateRadii()\n\n      this.generateHeading()\n      this.loadDefaultPlaces()\n     // this.loadNearbySubways()\n    }\n\n    // const resultsDropDown = <div>\n    //   <span style={{ color: 'whitesmoke'}}> Results</span>\n    //   <Form.Control value={this.state.places_count} as=\"select\" name=\"places_count\" onChange={this.onPlacesCountChange}>\n    //                 <option>20</option>\n    //                 <option>40</option>\n    //                 <option>60</option>\n    //   </Form.Control>\n    // </div>\n\n  const MapButtons = () => \n    \n    <div className='map-control_bar'>\n      <div className=\"rowOne\">\n        <Button className=\"toolbar_button\" onClick={this.props.runJoyRideTutorial}>?</Button>\n        <Button className=\"toolbar_button\" variant=\"light\" onClick={this.onHandleCenter}>Ctr</Button>\n          \n        <div className=\"switch_container\">\n            <span>Street</span>\n            <SliderSwitch checked={this.state.siteView} switchFunction={this.onHandleSite}></SliderSwitch>\n        </div>\n        <div className=\"switch_container\">\n          <span>Overlay</span>\n          <SliderSwitch checked={true} switchFunction={this.handleSwitch}></SliderSwitch>\n        </div>\n      </div>\n        <div className=\"place_dropdown_container\">\n          <div>\n            <span> Other Businesses</span>\n            <Form.Control value={this.state.business_type_option} as=\"select\" name=\"business_type\" onChange={this.onBusinessFormChange}>\n                          <option>none</option>\n                          <option>all</option>\n                        {BUSINESS_TYPES.map((e, i) => {\n                          if (e != 'residential') {\n                              return <option  key={i}>{e.replace(/_/g, ' ')}</option>\n                          }\n                        })}\n            </Form.Control>\n          </div>\n          <div>\n            <span>Places of Interest</span>\n            <Form.Control value={this.state.poi} as=\"select\" name=\"poi\" onChange={this.onPoiFormChange}>\n                        <option>none</option>\n                        <option>all</option>\n                        {POI_TYPES.map((e, i) => {\n                          return <option key={i}>{e.replace(/_/g, ' ')}</option>\n                        })}\n            </Form.Control>\n          </div>\n        </div>\n    </div>\n\n\n    // init street view only after heading is calculated\n    let streetViewContainer = <></>\n    const streetView =  <ReactStreetview\n    ref={this.streetView}\n    apiKey={GOOGLE_KEY}\n    streetViewPanoramaOptions={{\n      position: {lat: this.props.center.lat, lng: this.props.center.lng},\n      pov: {heading: this.state.heading, pitch: 0},\n      zoom: 1,\n      source: google.maps.StreetViewSource.OUTDOOR\n    }}\n    width={'400px'}\n    height={'400px'}\n  />;\n\n    if (this.state.heading != undefined) {\n      streetViewContainer = streetView;\n  }\n\n  const MapBundle = <div className=\"googleMap_container\">\n        <GoogleMapReact\n          ref={this.myRef}\n            bootstrapURLKeys={{ key: GOOGLE_KEY}}\n            center={this.state.center}\n            zoom={this.state.zoom}\n            yesIWantToUseGoogleMapApiInternals={true}\n            layerTypes={['TrafficLayer', 'TransitLayer']}\n            id={'map'}\n            onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, this.state.center)}\n            options= {this.state.mapOptions}\n            resetBoundsOnResize = {true}\n            onChange={this.handleChange}\n          />\n        {this.state.siteView && \n        <div className=\"streetView_container\">\n          {streetViewContainer}\n        </div>}\n        {this.state.loadingCart[this.props.data_range] == true && \n          <div className=\"fade_container\">\n            <FadeLoader color='#123abc' size={10}/>\n            <span>Loading Overlay</span>\n          </div>\n        }\n  </div>\n\n    return (\n      <div className='map_container'>\n\n        <MediaQuery minDeviceWidth={551}><MapButtons/></MediaQuery>\n        <MediaQuery maxDeviceWidth={550}>\n          <Toolbar openToolBar={this.openToolBar}/>\n          {this.state.toolsOpen && <MapButtons/>}\n        </MediaQuery>\n\n          {this.state.hasListing && \n            <button className=\"listingBanner\" onClick={this.navigateToListing}>\n              <div>\n                <span style={{ color: 'black'}}>This location has a listing, click </span> <span style={{ color : \"blue\"}}>here</span> <span style={{ color: 'black'}}> for details</span>\n              </div>\n            </button>\n          }\n\n         <MediaQuery maxDeviceWidth={550}>    \n            {this.state.hasListing &&  <div style={{height: window.innerHeight - 86 - 32 }}>\n                  {MapBundle}\n              </div>\n            }\n            {!this.state.hasListing &&  <div style={{height: window.innerHeight - 86 }}>\n                {MapBundle}\n              </div>\n            } \n         </MediaQuery>\n\n         <MediaQuery minDeviceWidth={551}>\n            <div style={{height:  (this.state.hasListing) ? `calc(${this.props.height} - 32px)` : this.props.height }}>     \n              {MapBundle}\n            </div>\n         </MediaQuery>\n        \n        <MediaQuery maxDeviceWidth={550}>\n           \n          <DemographicsPanel \n             business_type={this.props.business_type} \n             street = {this.props.address.street}\n             city = {this.props.address.city}\n             state = {this.props.address.state}\n             zip = {this.props.address.zip}\n             lat = {this.props.address.coords.lat}\n             lng = {this.props.address.coords.lng}\n             getHelpers={this.getHelpers}\n             orientation = {\"demographics-list-vertical \"}>\n           </DemographicsPanel>\n\n           <PlacesList/>\n           <ChartsPanel />\n          <div className=\"extrasContainer\">\n            <TransportationPanel/>\n            {/* <CommentsPanel/> */}\n          </div>\n        </MediaQuery>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = createSelector(\n  placesSelector, \n  activeSelector,\n  addressSelector,\n  businessTypeSelector,\n  zipSelector,\n  stateSelector,\n  tractSelector,\n  dataRangeSelector,\n  isCitySelector,\n  tradeZoneBoundsSelector,\n  transportationSelector, \n  geoUnitSelector,\n  statsSelector,\n  (places, active_place, address, business_type, zip, state, tract, data_range, isCity, tradeZone_bounds, transportation, geo_unit, stats) => ({\n    places, \n    active_place,\n    address,\n    business_type,\n    zip,\n    state, \n    tract,\n    data_range,\n    isCity,\n    tradeZone_bounds,\n    transportation,\n    geo_unit,\n    stats\n  })\n);\n \nconst mapActionsToProps = {\n  onUpdatePlaces: updatePlaces,\n  onUpdateActivePlace: updateActivePlace,\n  onUpdateTract: updateTract,\n  onUpdateTradeZoneBounds: updateTradeZoneBounds,\n  onUpdateTransportation: updateTransportation\n};\n\nexport default withRouter(connect(mapStateToProps, mapActionsToProps) (SimpleMap));\n\n\nfunction distance(lat1, lon1, lat2, lon2, unit) {\n\tif ((lat1 == lat2) && (lon1 == lon2)) {\n\t\treturn 0;\n\t}\n\telse {\n\t\tvar radlat1 = Math.PI * lat1/180;\n\t\tvar radlat2 = Math.PI * lat2/180;\n\t\tvar theta = lon1-lon2;\n\t\tvar radtheta = Math.PI * theta/180;\n\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\t\tif (dist > 1) {\n\t\t\tdist = 1;\n\t\t}\n\t\tdist = Math.acos(dist);\n\t\tdist = dist * 180/Math.PI;\n\t\tdist = dist * 60 * 1.1515;\n\t\tif (unit==\"K\") { dist = dist * 1.609344 }\n\t\tif (unit==\"N\") { dist = dist * 0.8684 }\n\t\treturn dist;\n\t}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}